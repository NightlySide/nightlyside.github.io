<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexandre Froehlich - python</title><link href="https://nightlyside.github.io/blog/" rel="alternate"></link><link href="https://nightlyside.github.io/blog/feeds/python.atom.xml" rel="self"></link><id>https://nightlyside.github.io/blog/</id><updated>2018-03-21T00:00:00+01:00</updated><entry><title>[TIPE] Un problème de route - Bonus</title><link href="https://nightlyside.github.io/blog/python/tipe-un-probleme-de-route-bonus/" rel="alternate"></link><published>2018-03-21T00:00:00+01:00</published><updated>2018-03-21T00:00:00+01:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2018-03-21:/blog/python/tipe-un-probleme-de-route-bonus/</id><summary type="html">
&lt;p&gt;Un petit bonus pour ce projet. Je cherche maintenant à représenter la vitesse de chaque véhicule afin d’avoir une idée plus précise sur la fluidité du trafic routier. Il y a certe peu de modifications à faire, mais cela en vaut le coup.
&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Un petit bonus pour ce projet. Je cherche maintenant &amp;agrave; repr&amp;eacute;senter la vitesse de chaque v&amp;eacute;hicule afin d&amp;rsquo;avoir une id&amp;eacute;e plus pr&amp;eacute;cise sur la fluidit&amp;eacute; du trafic routier. Il y a certe peu de modifications &amp;agrave; faire, mais cela en vaut le coup.
&lt;/p&gt;
&lt;h2 id="pourquoi une telle representation"&gt;Pourquoi une telle repr&amp;eacute;sentation&lt;/h2&gt;
&lt;p&gt;L&amp;rsquo;id&amp;eacute;e m&amp;rsquo;est venue en lisant des articles sur la repr&amp;eacute;sentation de Nagel-Schreckenberg. Apr&amp;egrave;s avoir fl&amp;acirc;n&amp;eacute; quelques temps sur wikip&amp;eacute;dia, j&amp;rsquo;ai d&amp;eacute;cid&amp;eacute; de changer la langue de la page afin de voir si d&amp;rsquo;autres contributeurs non francophones avaient &amp;eacute;toff&amp;eacute;s leur page plus que &amp;ccedil;a n&amp;rsquo;est le cas sur celle fran&amp;ccedil;aise.&lt;/p&gt;
&lt;p&gt;A ma grande surprise, la &lt;a href="https://de.wikipedia.org/wiki/Nagel-Schreckenberg-Modell"&gt;page allemande du model de Nagel Schreckenberg&lt;/a&gt; montre une repr&amp;eacute;sentation du model plut&amp;ocirc;t ing&amp;eacute;nieuse : donner une couleur par v&amp;eacute;hicule en fonction de la vitesse de circulation de celui-ci. (voir figure ci-dessous)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Repr&amp;eacute;sentation" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/NaSch.png"/&gt;&lt;/p&gt;
&lt;p&gt;Maintenant on va modifier le code source de notre &amp;eacute;tude afin d&amp;rsquo;y impl&amp;eacute;menter cette nouvelle fonctionalit&amp;eacute;.&lt;/p&gt;
&lt;h2 id="implementation"&gt;Impl&amp;eacute;mentation&lt;/h2&gt;
&lt;p&gt;La premi&amp;egrave;re &amp;eacute;tape est de modifier la fonction qui place les v&amp;eacute;hicules. En effet, pr&amp;eacute;cedemment, pour placer une voiture sur la carte, la simulation ajoutait un *2 sur la case correspondante.&lt;/p&gt;
&lt;p&gt;Maintenant nous allons remplacer la fonction placerVoiture de la classe Carte par le bout de code suivant : &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;placerVoiture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grille&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVitesse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La seule grande diff&amp;eacute;rence est que l&amp;rsquo;on calcule la valeur de la case par &lt;code&gt;2 + vitesse de la voiture&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cela nous am&amp;egrave;ne &amp;agrave; notre seconde modification, en effet, pour d&amp;eacute;tecter la pr&amp;eacute;sence d&amp;rsquo;une voiture, on r&amp;eacute;cup&amp;eacute;rait la valeur d&amp;rsquo;une case de la carte que l&amp;rsquo;on comparait &amp;agrave; 2. On remplace alors toutes les occurence par $\geq 2$ ce qui permettera de d&amp;eacute;tecter la pr&amp;eacute;sence d&amp;rsquo;une voiture quelque soit sa vitesse.&lt;/p&gt;
&lt;h2 id="affichage"&gt;Affichage&lt;/h2&gt;
&lt;p&gt;On a maintenant l&amp;rsquo;ajout des vitesses des voitures sur la carte, il est grand temps de les afficher ! Pour cela on change l&amp;eacute;g&amp;egrave;rement la liste des couleurs de matplotlib.pyplot par :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'palegreen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'antiquewhite'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orangered'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'firebrick'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'darkred'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'black'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ainsi une voiture &amp;agrave; l&amp;rsquo;arr&amp;ecirc;t sera de couleur jaune et tendra vers le rouge en acc&amp;eacute;l&amp;eacute;rant, puis sera noire &amp;agrave; vitesse maximale. Le seul probl&amp;egrave;me avec matplotlib est que si il n&amp;rsquo;y a pas au moins une occurence de chaque couleur, il n&amp;rsquo;affichera pas correctement la couleur de la route et des v&amp;eacute;hicules. On ajoute alors &amp;agrave; la repr&amp;eacute;sentation de la carte une unique ligne de pixels contenant toutes les valeurs de la vitesse afin quelles soient toutes repr&amp;eacute;sent&amp;eacute;es :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;tableau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tableau&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tableau&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;C&amp;rsquo;est tout ce qu&amp;rsquo;il y avait &amp;agrave; faire !! (oui j&amp;rsquo;ai pass&amp;eacute; pr&amp;egrave;s de 2 heures sur ces modifications) Le r&amp;eacute;sultat est vraiment satisfaisant par contre.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vitesses" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/TIPE/sim_vitesse.png"/&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="TIPE"></category><category term="route"></category></entry><entry><title>[TIPE] Un problème de route - Le final (4/4)</title><link href="https://nightlyside.github.io/blog/python/tipe-un-probleme-de-route-le-final-44/" rel="alternate"></link><published>2017-12-09T00:00:00+01:00</published><updated>2017-12-09T00:00:00+01:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2017-12-09:/blog/python/tipe-un-probleme-de-route-le-final-44/</id><summary type="html">&lt;p&gt;Derni&amp;egrave;re ligne droite pour le mod&amp;egrave;le informatique. La derni&amp;egrave;re &amp;eacute;tape consiste &amp;agrave; impl&amp;eacute;menter les carrefours, les d&amp;eacute;viations et les intersections. On se place toujours dans les hypoth&amp;egrave;ses mises en place dans l&amp;rsquo;explication de la d&amp;eacute;marche. Mais leur impl&amp;eacute;mentation n&amp;rsquo;est pas facile &amp;agrave; se repr&amp;eacute;senter. Durant la phase de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Derni&amp;egrave;re ligne droite pour le mod&amp;egrave;le informatique. La derni&amp;egrave;re &amp;eacute;tape consiste &amp;agrave; impl&amp;eacute;menter les carrefours, les d&amp;eacute;viations et les intersections. On se place toujours dans les hypoth&amp;egrave;ses mises en place dans l&amp;rsquo;explication de la d&amp;eacute;marche. Mais leur impl&amp;eacute;mentation n&amp;rsquo;est pas facile &amp;agrave; se repr&amp;eacute;senter. Durant la phase de d&amp;eacute;veloppement, on a fait face &amp;agrave; de nombreux probl&amp;egrave;mes, voici comment on les a r&amp;eacute;solu.&lt;/p&gt;
&lt;h2 id="reecriture des representations des voitures, chemins et de la grille"&gt;R&amp;eacute;&amp;eacute;criture des repr&amp;eacute;sentations des voitures, chemins et de la grille&lt;/h2&gt;
&lt;p&gt;L&amp;rsquo;ancienne repr&amp;eacute;sentation (&amp;agrave; l&amp;rsquo;aide de tableau) n&amp;rsquo;est probablement pas la meilleure solution &amp;agrave; consid&amp;eacute;rer pour la compr&amp;eacute;hension et la lisibilit&amp;eacute; de l&amp;rsquo;algorithme. Pour cela on utilisera les classes (notion hors programme de PSI en CPGE), pour plus d&amp;rsquo;information &lt;a href="https://openclassrooms.com/courses/apprenez-a-programmer-en-python/premiere-approche-des-classes"&gt;ce cours publi&amp;eacute; sur OpenClassroom&lt;/a&gt; explique mieux ce concept que je ne pourrais le faire.&lt;/p&gt;
&lt;h3 id="les voitures"&gt;Les voitures&lt;/h3&gt;
&lt;p&gt;Une des raisons pour lesquelles nous allons utiliser les classes est que cela facilite la compr&amp;eacute;hension. En effet pour r&amp;eacute;cup&amp;eacute;rer la vitesse d&amp;rsquo;une voiture avant il fallait r&amp;eacute;cup&amp;eacute;rer une entr&amp;eacute;e d&amp;rsquo;un tableau correspondant &amp;agrave; ladite voiture. En utilisant les classes on utilise maintenant la m&amp;eacute;thode &lt;code&gt;voiture.getPosition(t)&lt;/code&gt;. Ainsi, on cr&amp;eacute;e chaque voiture en lui donnant le nombre d&amp;rsquo;it&amp;eacute;rations que la simulation va calculer afin de stocker toutes les positions et vitesses pour les analyser. On lui donne le chemin sur lequel elle va &amp;eacute;voluer ainsi que sa position initiale et la vitesse maximale &amp;agrave; laquelle et pourra circuler. Le reste sera g&amp;eacute;r&amp;eacute; par la simulation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Voiture&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;facteur&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# On d&amp;eacute;finit les attributs de la voiture&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getVitesse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maj_vitesse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# On adapte ici le code de la simulation pr&amp;eacute;c&amp;eacute;dente&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="la carte et ses routes"&gt;La carte et ses routes&lt;/h3&gt;
&lt;p&gt;De m&amp;ecirc;me on retranscrit le code pr&amp;eacute;c&amp;eacute;dent en quelque chose de plus exploitable. En effet, il est plus simple d&amp;rsquo;&amp;eacute;crire &lt;code&gt;carte.placerVoiture(t, voiture)&lt;/code&gt; pour modifier la carte en ajoutant une voiture &amp;agrave; l&amp;rsquo;instant &lt;em&gt;t&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hauteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largeur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aleatoire&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# On d&amp;eacute;finit les attributs de la carte&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;elementALaPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Retourne l'&amp;eacute;l&amp;eacute;ment de la carte se trouvant &amp;agrave; une certaine position&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;creerGrille&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hauteur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largeur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aleatoire&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Permet d'initialiser la grille pour la simulation&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;represente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taille&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Retourne une repr&amp;eacute;sentation de la carte &amp;agrave; l'instant t&lt;/span&gt;
        &lt;span class="c1"&gt;# Et ce, taille fois plus grand&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;placerVoiture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;placerRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De m&amp;ecirc;me pour les routes :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Chemin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# On initialise la route &amp;agrave; partir des positions par lesquelles&lt;/span&gt;
        &lt;span class="c1"&gt;# elle passera&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;creerCheminSimple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Permet de cr&amp;eacute;er un chemin simple entre 2 points&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;creerCheminComplexe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Permet de cr&amp;eacute;er un chemin complexe passant par un ensemble de positions&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;additionneChemins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Permet d'additionner le chemin c &amp;agrave; l'actuel&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;estSurChemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# V&amp;eacute;rifie si une position se trouve sur le chemin&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;voisin_suivant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Retourner la distance en nombre de cases entre les deux positions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="le probleme de l'ancienne simulation_1"&gt;Le probl&amp;egrave;me de l'ancienne simulation&lt;/h2&gt;
&lt;p&gt;L&amp;rsquo;ancienne simulation fonctionnait bien lorsqu&amp;rsquo;il n&amp;rsquo;y avait qu&amp;rsquo;une seule voiture sur la route. Cependant, la voiture, face &amp;agrave; une bifurcation va choisir al&amp;eacute;atoirement une route ou l&amp;rsquo;autre. Nous l&amp;rsquo;avions cod&amp;eacute; de cette mani&amp;egrave;re, mais nous voulons que la circulation ne se fasse que dans un sens pour pouvoir analyser la vitesse et la densit&amp;eacute; des voitures.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Probl&amp;egrave;me" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/probleme.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Pour r&amp;eacute;soudre ce probl&amp;egrave;me, une solution (celle que j&amp;rsquo;ai choisi), est de num&amp;eacute;roter chaque case de la route, ainsi le sens de circulation sera donn&amp;eacute; par des indices de case croissants. C&amp;rsquo;est &amp;agrave; dire que le chemin du post pr&amp;eacute;c&amp;eacute;dent devient maintenant :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;chemin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; 
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; 
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; 
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; 
          &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="utilisation du nouveau code"&gt;Utilisation du nouveau code&lt;/h2&gt;
&lt;h3 id="quelques procedures et fonctions bien utiles"&gt;Quelques proc&amp;eacute;dures et fonctions bien utiles&lt;/h3&gt;
&lt;p&gt;Depuis le d&amp;eacute;but de ces posts, je vous ai pr&amp;eacute;sent&amp;eacute; des images, du texte, correspondant au r&amp;eacute;sultats des simulations mais je ne vous ai pas encore expliqu&amp;eacute; comment cela se fait. Voici quelques fonctions bien utiles que j&amp;rsquo;ai utilis&amp;eacute; entre autre afin d&amp;rsquo;exporte la carte &amp;agrave; un instant donn&amp;eacute;, comment j&amp;rsquo;ai transform&amp;eacute; une vitesse en cases par unit&amp;eacute; de temps en km/h, etc.&lt;/p&gt;
&lt;p&gt;La fonction suivante permet de r&amp;eacute;cup&amp;eacute;rer une distance cart&amp;eacute;sienne entre deux points (il s&amp;rsquo;agit de la norme de la distance &amp;agrave; ces points).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;distancePos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_i&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_f&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voici une autre fonction tr&amp;egrave;s utile que je tra&amp;icirc;ne avec moi depuis quelques ann&amp;eacute;es et qui me sert pour num&amp;eacute;roter des images d&amp;rsquo;une simulation afin qu&amp;rsquo;elles soient accept&amp;eacute;e par certains logiciels. Elle permet entre autre de transformer &lt;code&gt;98&lt;/code&gt; et &lt;code&gt;6&lt;/code&gt; en &lt;code&gt;00098&lt;/code&gt; et &lt;code&gt;00006&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ajoutezeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nombrezeros&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Prends le nombre n et rajoute le nombre de z&amp;eacute;ros n&amp;eacute;cessaires&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;agrave; sa repr&amp;eacute;sentation en chaine de charact&amp;egrave;re&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne une chaine de charact&amp;egrave;res&lt;/span&gt;
&lt;span class="sd"&gt;    ex : on veut un nombre &amp;agrave; 3 chiffres : ajoutezeros(3, 5) = "003"&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;nb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nombrezeros&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Le code suivant permet d&amp;rsquo;afficher la carte &amp;agrave; l&amp;rsquo;instant t. J&amp;rsquo;ai d&amp;eacute;cid&amp;eacute; de laisser tomber matplotlib pour pylab qui &amp;agrave; l&amp;rsquo;avantage de supporter un raffraichissement de l&amp;rsquo;image plus fr&amp;eacute;quent (et par cons&amp;eacute;quent le support des animations).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;affiche_grille&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tabplot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;represente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taille&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; \
                    &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListedColormap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'palegreen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'antiquewhite'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voici une des plus grandes avanc&amp;eacute;es de mon code depuis la premi&amp;egrave;re version (en lin&amp;eacute;aire) il sert &amp;agrave; jouer l&amp;rsquo;animation sans pour autant l&amp;rsquo;exporter en fichiers. Cela reste plutot lent et le param&amp;egrave;tre qui permet de contr&amp;ocirc;le le nombre d&amp;rsquo;images par secondes (FPS en anglais) est hom&amp;eacute;opathique.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;affiche_simulation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tabplot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;represente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taille&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; \ 
        &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListedColormap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'white'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'palegreen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'antiquewhite'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmax&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;tabplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;represente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;taille&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;xx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitforbuttonpress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="creation de la simulation"&gt;Cr&amp;eacute;ation de la simulation&lt;/h3&gt;
&lt;p&gt;Le code pr&amp;eacute;c&amp;eacute;dent s&amp;rsquo;est bien raccourci gr&amp;acirc;ce aux classes et poss&amp;egrave;de une certaine compr&amp;eacute;hension quand &amp;agrave; son initialisation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# on cr&amp;eacute;e la carte&lt;/span&gt;
&lt;span class="n"&gt;carte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# on cr&amp;eacute;e la route&lt;/span&gt;
&lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# on cr&amp;eacute;e la seconde route&lt;/span&gt;
&lt;span class="n"&gt;route2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Chemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# on indique l'endroit o&amp;ugrave; les routes vont se rejoindre&lt;/span&gt;
&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deviation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    
&lt;span class="c1"&gt;# On place la route&lt;/span&gt;
&lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placerChemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On a ainsi cr&amp;eacute;e la carte sur laquelle la simulation va se d&amp;eacute;rouler, cr&amp;eacute;e la route principale avec une d&amp;eacute;viation. Maintenant on doit cr&amp;eacute;e les voitures. Pour se faire rien de plus simple on utilise la classe du dessus pour cr&amp;eacute;e autant d&amp;rsquo;instances que de voitures. On utilise le code suivant, notez bien la structure particuli&amp;egrave;re qui est presque transparente.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;voitures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbVoitures&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;voiture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Voiture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitessemax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# On place la voiture&lt;/span&gt;
    &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placerVoiture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voiture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On vient de cr&amp;eacute;er toutes les voitures et on les a plac&amp;eacute;es &amp;agrave; leur premi&amp;egrave;re position c&amp;rsquo;est &amp;agrave; dire pour &amp;agrave; $t=0$. Il ne reste plus qu&amp;rsquo;&amp;agrave; calculer la vitesse de chaque voiture pour chaque temps et les d&amp;eacute;placer en cons&amp;eacute;quence. On commence &amp;agrave; $t=1$ puisque la situation initiale &amp;agrave; d&amp;eacute;j&amp;agrave; &amp;eacute;t&amp;eacute; d&amp;eacute;finie.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbTemps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Pour chacune des voitures&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# On fait avancer les voitures et on change leur vitesse&lt;/span&gt;
        &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;avance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vitesse&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maj_vitesse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# On replace la voiture sur la grille de l'instant t&lt;/span&gt;
        &lt;span class="n"&gt;carte&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placerVoiture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voitures&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="l'animation finale_1"&gt;L'animation finale&lt;/h2&gt;
&lt;p&gt;Ca y est ! On touche &amp;agrave; la fin. Normalement tout fonctionne maintenant et on se retrouve avec une carte contenant la position de toutes les voitures &amp;agrave; tout instant de la simulation. Il ne reste plus qu&amp;rsquo;&amp;agrave; traiter ce tableau afin d&amp;rsquo;afficher la simulation. On obtient finalement quelque chose qui ressemble &amp;agrave; l&amp;rsquo;animation ci-dessous.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Probl&amp;egrave;me" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/anim_finale.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Le mod&amp;egrave;le informatique est d&amp;egrave;s &amp;agrave; pr&amp;eacute;sent termin&amp;eacute;. La prochaine &amp;eacute;tape consiste &amp;agrave; construire une maquette mod&amp;eacute;lisant la circulation et de tout comparer &amp;agrave; la r&amp;eacute;alit&amp;eacute;.&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="TIPE"></category><category term="route"></category></entry><entry><title>[TIPE] Un problème de route - Passage en 2D (3/4)</title><link href="https://nightlyside.github.io/blog/python/tipe-un-probleme-de-route-passage-en-2d-34/" rel="alternate"></link><published>2017-12-02T00:00:00+01:00</published><updated>2017-12-02T00:00:00+01:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2017-12-02:/blog/python/tipe-un-probleme-de-route-passage-en-2d-34/</id><summary type="html">&lt;p&gt;La deuxi&amp;egrave;me &amp;eacute;tape consiste &amp;agrave; passer la simulation &amp;agrave; deux dimensions en vue d'impl&amp;eacute;menter les d&amp;eacute;viations et intersections. On peut encore s&amp;eacute;parer cette &amp;eacute;tape en plusieurs sous-&amp;eacute;tapes : cr&amp;eacute;ation d'une grille qui va accueillir la route, &amp;agrave; la mani&amp;egrave;re d'un plateau contenant des cartes ou des jetons, puis cr&amp;eacute;ation de la …&lt;/p&gt;</summary><content type="html">&lt;p&gt;La deuxi&amp;egrave;me &amp;eacute;tape consiste &amp;agrave; passer la simulation &amp;agrave; deux dimensions en vue d'impl&amp;eacute;menter les d&amp;eacute;viations et intersections. On peut encore s&amp;eacute;parer cette &amp;eacute;tape en plusieurs sous-&amp;eacute;tapes : cr&amp;eacute;ation d'une grille qui va accueillir la route, &amp;agrave; la mani&amp;egrave;re d'un plateau contenant des cartes ou des jetons, puis cr&amp;eacute;ation de la route et finalement adaptation des v&amp;eacute;hicules au nouveau syst&amp;egrave;me de route en 2 dimensions.&lt;/p&gt;
&lt;h2 id="creation de la grille"&gt;Cr&amp;eacute;ation de la grille&lt;/h2&gt;
&lt;p&gt;A quoi devra ressembler la grille ? Pour r&amp;eacute;pondre &amp;agrave; cette question on pose les conditions de d&amp;eacute;roulement de la simulation : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la grille devra contenir &lt;strong&gt;W&lt;/strong&gt; cases en largeur et &lt;strong&gt;H&lt;/strong&gt; cases en hauteur &lt;/li&gt;
&lt;li&gt;la simulation comportera &lt;strong&gt;T&lt;/strong&gt; it&amp;eacute;rations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alors la grille sera repr&amp;eacute;sent&amp;eacute;e par un tableau &amp;agrave; 3 dimensions de taille $T\times H\times W$ alors $\text{grille}[t]$ retournera l'&amp;eacute;tat de la grille &amp;agrave; l'instant $t$.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grille_random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Cr&amp;eacute;e une grille de fa&amp;ccedil;on analogue &amp;agrave; grille(w, h, t)&lt;/span&gt;
&lt;span class="sd"&gt;    Et pr&amp;eacute;remplie la grille avec des valeurs al&amp;eacute;atoires&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne un tableau de dimension 3 (x, y, t)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Avec le syst&amp;egrave;me actuel d'exportation de tableau qui consiste &amp;agrave; attribuer une couleur par case (0 pour blanc, 1 pour vert et 2 pour orange pale) avec chaque couleur associ&amp;eacute;e &amp;agrave; un &amp;eacute;l&amp;eacute;ment de la simulation (respectivement vide, route et v&amp;eacute;hicule). Le code ci-dessus retournera une grille de la bonne taille. Le remplissage &amp;eacute;tant al&amp;eacute;atoire pour mettre en &amp;eacute;vidence la structure de la grille, un exemple est le suivant :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Grille al&amp;eacute;atoire" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/random.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="creation de la route"&gt;Cr&amp;eacute;ation de la route&lt;/h2&gt;
&lt;p&gt;On entame d&amp;egrave;s &amp;agrave; pr&amp;eacute;sent une des parties des plus compliqu&amp;eacute;es avec la cr&amp;eacute;ation de la route. On d&amp;eacute;finit la route comme &amp;eacute;tant l'ensemble des positions prises par un chemin pour aller d'un point &lt;em&gt;A&lt;/em&gt; &amp;agrave; un point &lt;em&gt;B&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AtoB" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/AtoB.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;En prenant les coordonn&amp;eacute;es de $A = (0,0)$ et $B = (2,2)$ alors le chemin correpondant sera :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;chemin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="algorithme"&gt;Algorithme&lt;/h3&gt;
&lt;p&gt;Pour cr&amp;eacute;er la route on initialise un tableau contenant les positions de chaque case. On commence par la case du d&amp;eacute;but puis on choisis la prochaine de fa&amp;ccedil;on relativement simple, on sera probablement amen&amp;eacute; qu'&amp;agrave; cr&amp;eacute;er des droites ou des angles droits, il n'est donc pas n&amp;eacute;cessaire de se compliquer la t&amp;acirc;che. Une fois qu'on est arriv&amp;eacute;e &amp;agrave; la derni&amp;egrave;re case on retourne la liste cr&amp;eacute;e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;  Permet de cr&amp;eacute;er un chemin entre deux coordonn&amp;eacute;es pos1, et pos2&lt;/span&gt;
&lt;span class="sd"&gt;  Prends en argument 2 positions (x, y)&lt;/span&gt;
&lt;span class="sd"&gt;  Retourne une liste de positions correspondant au chemin cr&amp;eacute;e&lt;/span&gt;
&lt;span class="sd"&gt;  """&lt;/span&gt;
  &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;
  &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A partir de cet algorithme on peut maintenant cr&amp;eacute;er une nouvelle fonction qui prendra une liste de positions par lesquelles le chemin devra passer et qui retournera un tel chemin. Comme on suppose le trac&amp;eacute; global simple, on segmente le chemin en tra&amp;ccedil;ant la route entre 2 positions &amp;agrave; chaque fois. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chemin_complexe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Permet de cr&amp;eacute;er un chemin complexe, c'est &amp;agrave; dire&lt;/span&gt;
&lt;span class="sd"&gt;    un chemin qui passe par n positions&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne le chemin passant par les positions&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cprime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cprime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;A noter qu'&amp;eacute;crire &lt;code&gt;*positions&lt;/code&gt; permet de donner autant d'argument &amp;agrave; la fonction qu'on le souhaite&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Par exemple &amp;eacute;crire le code ci-dessous :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chemin_complexe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Correspondra &amp;agrave; la grille suivante : 
&lt;img alt="chemin_sur_route" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/chemin_sur_route.jpg"/&gt;&lt;/p&gt;
&lt;h2 id="faire avancer les voitures_1"&gt;Faire avancer les voitures&lt;/h2&gt;
&lt;p&gt;Maintenant qu'on a la grille ainsi que la route qui la parcourt, il est temps de faire avancer les voiture. Pour cela on r&amp;eacute;utilise le m&amp;ecirc;me principe que celui vu dans le post pr&amp;eacute;c&amp;eacute;dent. Cependant un probl&amp;egrave;me nous fait face, en effet comment savoir quelle sera la prochaine case que l'algorithme devra explorer ?&lt;/p&gt;
&lt;h3 id="recherche des voisins possibles"&gt;Recherche des voisins possibles&lt;/h3&gt;
&lt;p&gt;Une solution est de chercher toutes les cases qui juxtapose une position donn&amp;eacute;e (i.e. qui sont juste &amp;agrave; c&amp;ocirc;t&amp;eacute; de la case), on teste chacune des cases pour savoir si il s'agit bien d'une route. Si oui on l'ajoute &amp;agrave; la liste des voisins possible, sinon on passe &amp;agrave; la suivante. Une fois qu'on a test&amp;eacute; toutes les cases on retourne la liste des cases possibles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cherche_voisins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Permet de renvoyer les voisins possibles juxtaposant &lt;/span&gt;
&lt;span class="sd"&gt;    la position actuelle&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne une liste de positions &lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
    &lt;span class="n"&gt;voisins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;voisins&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pour choisir la case suivante on liste celle possible, on cherche la case la plus proche de celle &amp;agrave; atteindre. Dans le cas o&amp;ugrave; on a une d&amp;eacute;viation, l'algorithme choisira le chemin le plus court "&amp;agrave; vol d'oiseau". Ce qui &amp;agrave; l'air au premier abord de ressembler &amp;agrave; la r&amp;eacute;alit&amp;eacute;. Enfin.. c'est logique quoi :)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;voisin_plus_proche&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne le voisin le plus proche d'une position donn&amp;eacute;e&lt;/span&gt;
&lt;span class="sd"&gt;    Cela permet de d&amp;eacute;cider dans quelle direction aller pour &lt;/span&gt;
&lt;span class="sd"&gt;    atteindre un point donn&amp;eacute;&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne une position&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
    &lt;span class="n"&gt;dmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"inf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;vproche&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;voisin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;voisin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;voisin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dmin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;dmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distance&lt;/span&gt;
            &lt;span class="n"&gt;vproche&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voisin&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vproche&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="nouveau calcul de la distance"&gt;Nouveau calcul de la distance&lt;/h3&gt;
&lt;p&gt;L'algorithme du post pr&amp;eacute;c&amp;eacute;dent avait besoin de connaitre la distance de la voiture &amp;agrave; celle qui lui pr&amp;eacute;c&amp;eacute;dait pour la phase de d&amp;eacute;c&amp;eacute;l&amp;eacute;ration. Maintenant on ne peux plus juste calculer la distance cart&amp;eacute;sienne entre les deux points &amp;agrave; cause de la forme de la route. Pour la calculer il suffit de partir de la position de la voiture et de remonter le chemin jusqu'&amp;agrave; rencontrer la voiture suivante.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Essayer de calculer la distance entre 2 cases d'une grille&lt;/span&gt;
&lt;span class="sd"&gt;    en suivant un chemin donn&amp;eacute;&lt;/span&gt;
&lt;span class="sd"&gt;    Retourne un entier correspondant &amp;agrave; la longueur du chemin &amp;agrave; faire &lt;/span&gt;
&lt;span class="sd"&gt;    entre le point pos1 et pos2&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="c1"&gt;# On v&amp;eacute;rifie que les positions appartiennent au chemin&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos1&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pos2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;voisins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cherche_voisins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voisin_plus_proche&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;voisins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="deplacer la voiture"&gt;D&amp;eacute;placer la voiture&lt;/h3&gt;
&lt;p&gt;Maintenant qu'on a calcul&amp;eacute; tout ce qu'il fallait, il ne reste plus qu'&amp;agrave; d&amp;eacute;placer la voiture le long du chemin &amp;agrave; l'aide de tout ce qu'on a d&amp;eacute;finit plus haut. Pour cela on part de la position initiale (&lt;em&gt;pos&lt;/em&gt;) puis on parcourt le chemin d'un nombre de cases &amp;eacute;gal &amp;agrave; la vitesse de la voiture (&lt;em&gt;vitesse&lt;/em&gt;) si il y avait d&amp;eacute;j&amp;agrave; une voiture, par s&amp;eacute;curit&amp;eacute; on s'arr&amp;ecirc;te, sinon on continue jusqu'&amp;agrave; ce qu'on ait termin&amp;eacute;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;avance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitesse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chemin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grille&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;     
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Calcule la prochaine position d'une voiture sur un chemin&lt;/span&gt;
&lt;span class="sd"&gt;    en fonction de sa vitesse et de la voiture pr&amp;eacute;c&amp;eacute;dente&lt;/span&gt;
&lt;span class="sd"&gt;    Si la voiture devant est &amp;agrave; l'arret la voiture actuelle&lt;/span&gt;
&lt;span class="sd"&gt;    s'arr&amp;ecirc;tera juste avant &lt;/span&gt;
&lt;span class="sd"&gt;    Retourne une position ainsi que le nombre de case parcourues&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos_i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;vitesse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nouvelle_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;voisin_suivant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nouvelle_pos&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;grille&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            
        &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nouvelle_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="resultat_1"&gt;R&amp;eacute;sultat&lt;/h2&gt;
&lt;p&gt;On r&amp;eacute;aplique le m&amp;ecirc;me proc&amp;eacute;d&amp;eacute; que pour la situation lin&amp;eacute;aire. On prends sur la route du dessus 100 voitures roulant &amp;agrave; 130km/h maximum et on calcule la simulation sur 250 it&amp;eacute;rations. On calcule chaque it&amp;eacute;ration puis on exporte la grille &amp;agrave; chaque instant. En assemblant les images dans un GIF anim&amp;eacute;, on obtient l'animation suivante :&lt;/p&gt;
&lt;p&gt;&lt;img alt="sim_2D_anim" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/TIPE/sim_2D_anim.gif"/&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="TIPE"></category><category term="route"></category></entry><entry><title>[TIPE] Un problème de route - Le modèle informatique (2/4)</title><link href="https://nightlyside.github.io/blog/python/tipe-un-probleme-de-route-le-modele-informatique-24/" rel="alternate"></link><published>2017-12-01T00:00:00+01:00</published><updated>2017-12-01T00:00:00+01:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2017-12-01:/blog/python/tipe-un-probleme-de-route-le-modele-informatique-24/</id><summary type="html">&lt;p&gt;Nous allons maintenant mod&amp;eacute;liser le trafic routier pour une portion de route, en respectant les hypoth&amp;egrave;ses donn&amp;eacute;es et d&amp;eacute;crites dans le dernier post. Pour cela on proc&amp;egrave;de en 3 &amp;eacute;tapes : on cr&amp;eacute;e un mod&amp;egrave;le basique &amp;agrave; une dimension, puis on l&amp;rsquo;&amp;eacute;tend &amp;agrave; 2 dimensions et on ajoute en derni&amp;egrave;re …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nous allons maintenant mod&amp;eacute;liser le trafic routier pour une portion de route, en respectant les hypoth&amp;egrave;ses donn&amp;eacute;es et d&amp;eacute;crites dans le dernier post. Pour cela on proc&amp;egrave;de en 3 &amp;eacute;tapes : on cr&amp;eacute;e un mod&amp;egrave;le basique &amp;agrave; une dimension, puis on l&amp;rsquo;&amp;eacute;tend &amp;agrave; 2 dimensions et on ajoute en derni&amp;egrave;re &amp;eacute;tape les d&amp;eacute;viations et intersections. Ce post correspond &amp;agrave; la premi&amp;egrave;re phase.&lt;/p&gt;
&lt;p&gt;La question qui m&amp;rsquo;a le plus souvent &amp;eacute;t&amp;eacute; pos&amp;eacute;e lorsque je d&amp;eacute;crivais mon projet &amp;agrave; mes camarades de classe &amp;eacute;tait la suivante :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mais comment est-ce que tu choisis l&amp;rsquo;endroit o&amp;ugrave; va se produire l&amp;rsquo;embouteillage ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A cette question je leur r&amp;eacute;ponds simplement que je ne choisis pas ! En effet, le but de cette mod&amp;eacute;lisation est de faire en sorte que les voitures, par leur comportement, cr&amp;eacute;ent une congestion.&lt;/p&gt;
&lt;h2 id="le comportement de base des voitures"&gt;Le comportement de base des voitures&lt;/h2&gt;
&lt;p&gt;En suivant l&amp;rsquo;id&amp;eacute;e du sujet de concours &lt;a href="https://nightlyside.github.io/blog/files/TIPE/PSI-Informatique.pdf"&gt;CCP 2017&lt;/a&gt; (concours d&amp;rsquo;entr&amp;eacute;e aux &amp;eacute;coles d&amp;rsquo;ing&amp;eacute;nieur), on peut d&amp;eacute;crire le comportement des voitures simplement en d&amp;eacute;composant un instant t en plusieurs &amp;eacute;tapes, en mettant &amp;agrave; jour leur vitesse. Cette m&amp;eacute;thode de simulation s&amp;rsquo;appelle aussi la simulation de &lt;strong&gt;Nagel et Schreckenberg&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="acceleration"&gt;Acc&amp;eacute;l&amp;eacute;ration&lt;/h3&gt;
&lt;p&gt;La premi&amp;egrave;re &amp;eacute;tape consiste &amp;agrave; acc&amp;eacute;l&amp;eacute;rer le v&amp;eacute;hicule d&amp;rsquo;une case par unit&amp;eacute; de temps. Cela correspond &amp;agrave; une phase normale d&amp;rsquo;acc&amp;eacute;l&amp;eacute;ration. On limite cependant la vitesse &amp;agrave; la vitesse maximale de la route.&lt;/p&gt;
&lt;p&gt;$$ v_k(t + 1) \rightarrow \text{min}(v_k(t) + 1,v_\text{max}) $$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;acceleration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Augmente l'acc&amp;eacute;l&amp;eacute;ration du v&amp;eacute;hicule k d'une unit&amp;eacute;&lt;/span&gt;
&lt;span class="sd"&gt;    si il n'est pas &amp;agrave; sa vitesse maximale&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="deceleration"&gt;D&amp;eacute;c&amp;eacute;l&amp;eacute;ration&lt;/h3&gt;
&lt;p&gt;La seconde &amp;eacute;tape consiste &amp;agrave; faire ralentir le v&amp;eacute;hicule si la vitesse actuelle le fait rentrer en collision avec un autre v&amp;eacute;hicule. Pour se faire, on calcule la distance entre le v&amp;eacute;hicule et le pr&amp;eacute;c&amp;eacute;dent et on le compare &amp;agrave; la vitesse actuelle. Si le v&amp;eacute;hicule est trop loin, le v&amp;eacute;hicule roule &amp;agrave; la m&amp;ecirc;me vitesse, mais s&amp;rsquo;il est trop proche, le v&amp;eacute;hicule avance jusqu&amp;rsquo;&amp;agrave; coller le v&amp;eacute;hicule devant lui, sa vitesse en sera diminu&amp;eacute;e pour simuler un freinage.&lt;/p&gt;
&lt;p&gt;$$ v_k(t + 1) \rightarrow \text{min}(v_k(t + 1),d_k &amp;minus; 1) $$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deceleration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    D&amp;eacute;c&amp;eacute;l&amp;egrave;re si le v&amp;eacute;hicule k ne peut pas continuer &amp;agrave; sa vitesse &lt;/span&gt;
&lt;span class="sd"&gt;    actuelle (il y a un v&amp;eacute;hicule devant)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;dk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xk1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xk&lt;/span&gt; &lt;span class="c1"&gt;# distance entre les v&amp;eacute;hicules&lt;/span&gt;
    &lt;span class="c1"&gt;# mise &amp;agrave; jour de la vitesse&lt;/span&gt;
    &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="facteur aleatoire"&gt;Facteur al&amp;eacute;atoire&lt;/h3&gt;
&lt;p&gt;Cette &amp;eacute;tape correspond au ralentissement al&amp;eacute;atoire qui peut survenir en tout temps. Pour expliquer le r&amp;eacute;alisme d&amp;rsquo;une telle op&amp;eacute;ration, il faut s&amp;rsquo;imaginer rouler sur une autoroute droite sans personne dessus &amp;agrave; part un v&amp;eacute;hicule qui roule (sans r&amp;eacute;gulateur de vitesse bien s&amp;ucirc;r). Alors il peut survenir un moment d&amp;rsquo;inattention qui va faire ralentir al&amp;eacute;atoirement le conducteur.&lt;/p&gt;
&lt;p&gt;$$ \text{Si rand()}&amp;lt; p \text{ alors }v_k(t + 1) \rightarrow \text{max}(v_k(t + 1) &amp;minus; 1,0) $$&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est ce ph&amp;eacute;nom&amp;egrave;ne qui est repr&amp;eacute;sent&amp;eacute; par cette &amp;eacute;tape, il se trouve d&amp;rsquo;ailleurs que pour cette simulation, cette &amp;eacute;tape est celle qui cr&amp;eacute;e les embouteillages routiers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;facteur_aleatoire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Facteur al&amp;eacute;atoire de ralentissement (p)&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="deplacement"&gt;D&amp;eacute;placement&lt;/h3&gt;
&lt;p&gt;Cette derni&amp;egrave;re &amp;eacute;tape permet d&amp;rsquo;inscrire le mouvement li&amp;eacute; &amp;agrave; la vitesse de chaque v&amp;eacute;hicule. C&amp;rsquo;est &amp;agrave; dire qu&amp;rsquo;apr&amp;egrave;s avoir fait la mise &amp;agrave; jour de toutes les vitesses et en v&amp;eacute;rifiant bien qu&amp;rsquo;aucun v&amp;eacute;hicule ne rentre en collision avec d&amp;rsquo;autres, on d&amp;eacute;place les voitures sur la route en mettant &amp;agrave; jour leur position.&lt;/p&gt;
&lt;p&gt;$$ X_n(t + 1) \rightarrow X_n(t) + v_n(t + 1) $$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deplacement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    D&amp;eacute;place le v&amp;eacute;hicule k a sa position suivante&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;xk&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xk&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;vitesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="resultat_1"&gt;R&amp;eacute;sultat&lt;/h2&gt;
&lt;p&gt;En prenant une route d&amp;rsquo;une certaine taille puis en initialisant la route avec un nombre de voitures donn&amp;eacute;, on obtient un tableau de taille &lt;em&gt;longueur x iterations&lt;/em&gt; qui repr&amp;eacute;sentera la route et chaque ligne correspondra &amp;agrave; un instant donn&amp;eacute;. On obtient un tableau de la forme :&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simulation lin&amp;eacute;aire" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/sim_lineaire.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Les conditions initiales &amp;eacute;tant :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;toutes les voitures partent &amp;agrave; la m&amp;ecirc;me vitesse&lt;/li&gt;
&lt;li&gt;toutes les voitures partent avec une distance &amp;eacute;gale avec la pr&amp;eacute;c&amp;eacute;dente&lt;/li&gt;
&lt;li&gt;toutes les voitures poss&amp;egrave;dent le m&amp;ecirc;me facteur al&amp;eacute;atoire (80% ici)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chaque point jaune correspond &amp;agrave; un v&amp;eacute;hicule, le reste &amp;eacute;tant la route. On se rend compte qu&amp;rsquo;avec de telles hypoth&amp;egrave;ses, un bouchon se forme (sorte d&amp;rsquo;amas de points jaunes). Le code fonctionne !&lt;/p&gt;
&lt;p&gt;Pour mieux comprendre voici une animation qui reprends chaque ligne de l&amp;rsquo;image du dessus et la fait d&amp;eacute;filer l&amp;rsquo;une apr&amp;egrave;s l&amp;rsquo;autre. On comprends ainsi mieux pourquoi les amas de points correspondent &amp;agrave; un embouteillage.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Simulation lin&amp;eacute;aire" class="center img-zoomable" src="https://nightlyside.github.io/blog/images/TIPE/sim_lineaire_anim.gif"/&gt;&lt;/p&gt;
&lt;p&gt;La prochaine &amp;eacute;tape vue dans le prochain post sera de traduire ce code, d&amp;rsquo;utiliser le m&amp;ecirc;me principe et le m&amp;ecirc;me fonctionnement mais cette fois-ci sur une grille en 2D.&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="TIPE"></category><category term="route"></category></entry><entry><title>[TIPE] Un problème de route - La démarche (1/4)</title><link href="https://nightlyside.github.io/blog/python/tipe-un-probleme-de-route-la-demarche-14/" rel="alternate"></link><published>2017-11-29T00:00:00+01:00</published><updated>2017-11-29T00:00:00+01:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2017-11-29:/blog/python/tipe-un-probleme-de-route-la-demarche-14/</id><summary type="html">&lt;p&gt;Le trafic routier est probablement l&amp;rsquo;un des plus grands fl&amp;eacute;aux du quotidien. Nous faisant perdre un temps consid&amp;eacute;rable, r&amp;eacute;duisant la productivit&amp;eacute; et poussant &amp;agrave; des comportements dangereux, les embouteillages repr&amp;eacute;sentent un facteur d&amp;eacute;terminant dans les accidents de la route. Alors qu&amp;rsquo;ils se produisent presque quotidiennement chaque jour sur …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Le trafic routier est probablement l&amp;rsquo;un des plus grands fl&amp;eacute;aux du quotidien. Nous faisant perdre un temps consid&amp;eacute;rable, r&amp;eacute;duisant la productivit&amp;eacute; et poussant &amp;agrave; des comportements dangereux, les embouteillages repr&amp;eacute;sentent un facteur d&amp;eacute;terminant dans les accidents de la route. Alors qu&amp;rsquo;ils se produisent presque quotidiennement chaque jour sur certaines routes, et ce depuis des d&amp;eacute;cennies, il serait enfin temps d&amp;rsquo;envisager une solution pour s&amp;rsquo;en d&amp;eacute;barrasser.&lt;/p&gt;
&lt;h2 id="avant-propos"&gt;Avant-propos&lt;/h2&gt;
&lt;p&gt;Ce que je vais m&amp;rsquo;efforcer de d&amp;eacute;crire au cours des prochains posts est la d&amp;eacute;marche que mon bin&amp;ocirc;me (Kieran D.) et moi-m&amp;ecirc;me avons entrepris afin de reproduire les conditions d&amp;rsquo;un bouchon routier, puis d&amp;rsquo;&amp;eacute;tudier l&amp;rsquo;impact de la cr&amp;eacute;ation d&amp;rsquo;une d&amp;eacute;viation sur un tel embouteillage.&lt;/p&gt;
&lt;p&gt;Cette d&amp;eacute;marche n&amp;rsquo;est probablement pas la plus r&amp;eacute;aliste des simulations et le r&amp;eacute;sultat obtenu pourrait &amp;eacute;ventuellement diff&amp;eacute;rer de ce que nous avons mesur&amp;eacute;. Le but &amp;eacute;tant de se rapprocher un maximum d&amp;rsquo;un cas concret afin d&amp;rsquo;avoir une id&amp;eacute;e g&amp;eacute;n&amp;eacute;rale des solutions &amp;agrave; notre disposition pour r&amp;eacute;gler le probl&amp;egrave;me du trafic routier.&lt;/p&gt;
&lt;h2 id="comment se cree un embouteillage ?"&gt;Comment se cr&amp;eacute;e un embouteillage ?&lt;/h2&gt;
&lt;p&gt;On vient &amp;agrave; peine de commencer &amp;agrave; r&amp;eacute;fl&amp;eacute;chir au sujet qu&amp;rsquo;on fait d&amp;eacute;j&amp;agrave; face &amp;agrave; une premi&amp;egrave;re barri&amp;egrave;re. Comment se cr&amp;eacute;e un bouchon routier ? La question a d&amp;eacute;j&amp;agrave; &amp;eacute;t&amp;eacute; pens&amp;eacute;e, r&amp;eacute;fl&amp;eacute;chie, retourn&amp;eacute;e. L&amp;rsquo;APRR (Autoroutes Paris-Rhin-Rh&amp;ocirc;ne) aborde la question dans &lt;a href="http://www.aprr.fr/fr/actualites/avec-vous-sur-la-route-comment-se-forment-les-bouchons-sur-autoroute"&gt;cet article&lt;/a&gt; et d&amp;eacute;finie l&amp;rsquo;embouteillage :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;La route est comme un &amp;laquo; tuyau &amp;raquo; qui ne peut faire passer plus d&amp;rsquo;un &amp;laquo; flux &amp;raquo; maximal de v&amp;eacute;hicules. &amp;Agrave; cette limite physique s&amp;rsquo;ajoute le temps de r&amp;eacute;action des conducteurs, qui r&amp;eacute;percutent avec un l&amp;eacute;ger d&amp;eacute;calage le coup de frein du conducteur qui les pr&amp;eacute;c&amp;egrave;de. Et red&amp;eacute;marrent ensuite avec un nouveau temps de retard. Lorsque la circulation est dense, cela suffit &amp;agrave; engendrer un bouchon : les temps de retard s&amp;rsquo;ajoutent les uns aux autres, aboutissant parfois &amp;agrave; une perturbation de grande ampleur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Expliqu&amp;eacute;e autrement, il suffit qu&amp;rsquo;un conducteur adopte un mode de conduite qui sortirait de la &amp;ldquo;conduite de croisi&amp;egrave;re&amp;rdquo;, en changeant de voie rapidement par exemple ou encore en ralentissant dans une ligne droite tandis qu&amp;rsquo;aucun obstacle ne lui fait face.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Changement de voie" class="center img-zoomable" height="200px" src="https://nightlyside.github.io/blog/images/TIPE/chg_voie.jpg"/&gt;
&lt;center&gt;Source : &lt;a href="https://www.wikihow.com/Merge-with-Heavy-Traffic"&gt;Wikihow&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h2 id="comment traduire ces elements"&gt;Comment traduire ces &amp;eacute;l&amp;eacute;ments&lt;/h2&gt;
&lt;p&gt;On peut alors commencer &amp;agrave; faire une liste des &amp;eacute;l&amp;eacute;ments &amp;agrave; prendre en compte dans notre &amp;eacute;tude :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;les voitures ont une vitesse maximale impos&amp;eacute;e&lt;/li&gt;
&lt;li&gt;la voiture peut ralentir &amp;agrave; tout moment quel que soit la route (facteur al&amp;eacute;atoire)&lt;/li&gt;
&lt;li&gt;si la voiture rencontre un croisement elle peut emprunter l&amp;rsquo;un ou l&amp;rsquo;autre chemin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ainsi que quelques hypoth&amp;egrave;ses simplificatrices :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on &amp;eacute;tudiera qu&amp;rsquo;une portion de route o&amp;ugrave; la fin ram&amp;egrave;ne au d&amp;eacute;but de la route (cf. Tore)&lt;/li&gt;
&lt;li&gt;la route ne poss&amp;egrave;de qu&amp;rsquo;une seule voie&lt;/li&gt;
&lt;li&gt;la route ne circule que dans un sens (sens unique)&lt;/li&gt;
&lt;li&gt;si la voiture rencontre un croisement, le choix du chemin &amp;agrave; prendre est enti&amp;egrave;rement al&amp;eacute;atoire&lt;/li&gt;
&lt;li&gt;les accidents sont inexistants et si une voiture s&amp;rsquo;arr&amp;ecirc;te toutes celles qui suivent s&amp;rsquo;arr&amp;ecirc;tent en se collant &amp;agrave; celle de devant&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="et ensuite ?"&gt;Et ensuite ?&lt;/h2&gt;
&lt;p&gt;On a maintenant le principe et les concepts de base. Pour continuer dans notre d&amp;eacute;marche, le travail &amp;agrave; &amp;eacute;t&amp;eacute; d&amp;eacute;coup&amp;eacute; en deux partie :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un mod&amp;egrave;le informatique : simuler au plus pr&amp;egrave;s la circulation routi&amp;egrave;re pour se rendre compte de l&amp;rsquo;impact de diff&amp;eacute;rents param&amp;egrave;tres sur le trafic routier&lt;/li&gt;
&lt;li&gt;une maquette : pour valider ou ajuster le mod&amp;egrave;le informatique&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="python"></category><category term="TIPE"></category><category term="route"></category></entry></feed>