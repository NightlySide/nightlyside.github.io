<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexandre Froehlich - projets</title><link href="https://nightlyside.github.io/blog/" rel="alternate"></link><link href="https://nightlyside.github.io/blog/feeds/projets.atom.xml" rel="self"></link><id>https://nightlyside.github.io/blog/</id><updated>2020-06-15T00:00:00+02:00</updated><entry><title>La Bataille Brestoise</title><link href="https://nightlyside.github.io/blog/projets/la-bataille-brestoise/" rel="alternate"></link><published>2020-06-15T00:00:00+02:00</published><updated>2020-06-15T00:00:00+02:00</updated><author><name>Alexandre Froehlich</name></author><id>tag:nightlyside.github.io,2020-06-15:/blog/projets/la-bataille-brestoise/</id><summary type="html">
&lt;p&gt;Dans le cadre de mes études d'ingénieur à l'&lt;a href="https://www.ensta-bretagne.fr"&gt;ENSTA Bretagne&lt;/a&gt;, j'ai réalisé à l'aide de mon binôme un projet de fin de cycle en python avec pour objectif d'y intégrer de la programmation orientée objet ainsi que de l'interface homme machine.&lt;br/&gt;
"La bataille brestoise" est le projet que nous avons codé sur près de 3 mois. Il s'agit d'un jeu en réseau de bataille navale en temps réel basé sur la rade de Brest ainsi que sur les bâtiments de la Marine Nationale.
&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Dans le cadre de mes &amp;eacute;tudes d'ing&amp;eacute;nieur &amp;agrave; l'&lt;a href="https://www.ensta-bretagne.fr"&gt;ENSTA Bretagne&lt;/a&gt;, j'ai r&amp;eacute;alis&amp;eacute; &amp;agrave; l'aide de mon bin&amp;ocirc;me un projet de fin de cycle en python avec pour objectif d'y int&amp;eacute;grer de la programmation orient&amp;eacute;e objet ainsi que de l'interface homme machine.&lt;br/&gt;
"La bataille brestoise" est le projet que nous avons cod&amp;eacute; sur pr&amp;egrave;s de 3 mois. Il s'agit d'un jeu en r&amp;eacute;seau de bataille navale en temps r&amp;eacute;el bas&amp;eacute; sur la rade de Brest ainsi que sur les b&amp;acirc;timents de la Marine Nationale.
&lt;/p&gt;
&lt;hr/&gt;
&lt;blockquote&gt;
&lt;p&gt;Le projet est disponible sur mon repo (installation et utilisation) : &lt;a href="https://github.com/NightlySide/La-Bataille-Brestoise"&gt;https://github.com/NightlySide/La-Bataille-Brestoise&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;L'objectif initial du projet &amp;eacute;tait de mettre &amp;agrave; profit le cours vu sur la programmation orient&amp;eacute;e objet ainsi que les bases de l'Interface Homme-Machine (IHM). Cependant, avec mon bin&amp;ocirc;me nous avons souhait&amp;eacute; pousser le projet plus loin en y int&amp;eacute;grant par exemple une connexion clients-serveur et des machines &amp;agrave; &amp;eacute;tat finis pour faire de l'intelligence artificielle.&lt;/p&gt;
&lt;p&gt;Nous avons donc d&amp;eacute;cid&amp;eacute; de partir sur le d&amp;eacute;veloppement d'un jeu de bataille navale en temps r&amp;eacute;el, inspir&amp;eacute; de jeux en .io tel que le c&amp;eacute;l&amp;egrave;bre &lt;a href="https://agar.io"&gt;agar.io&lt;/a&gt;, dont les b&amp;acirc;timents sont inspir&amp;eacute;s de la Marine Nationale.&lt;br/&gt;
Dans ce jeu, le but sera d'atteindre le niveau 5 en &amp;eacute;liminant les adversaires (IA et joueurs r&amp;eacute;els) pour obtenir des points d'exp&amp;eacute;rience. Si le joueur d&amp;eacute;c&amp;egrave;de, il r&amp;eacute;appara&amp;icirc;t avec un b&amp;acirc;timent de niveau inf&amp;eacute;rieur.&lt;br/&gt;
Des commandes sont disponibles pour le client et pour le serveur de mani&amp;egrave;re &amp;agrave; pouvoir int&amp;eacute;ragir avec le jeu. De plus une chatbox est mise &amp;agrave; disposition des joueurs pour la communication entre les joueurs et la communication des informations sur la partie.&lt;/p&gt;
&lt;p&gt;L'&amp;eacute;quilibrage du jeu est obtenu par deux &amp;eacute;tapes, la premi&amp;egrave;re &amp;eacute;tant un calcul b&amp;egrave;te et m&amp;eacute;chant de d&amp;eacute;g&amp;acirc;ts par seconde. Les r&amp;eacute;sultats condens&amp;eacute;s dans un tableau excel permettent de mettre en avant cet &amp;eacute;quilibrage. La deuxi&amp;egrave;me &amp;eacute;tape consiste &amp;agrave; tester les r&amp;eacute;glages en jeu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Equilibrage des b&amp;acirc;timents" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/balance.png"/&gt;&lt;/p&gt;
&lt;p&gt;Pour ce jeu, on a tout d'abord commenc&amp;eacute; par la cr&amp;eacute;ation du serveur. &lt;/p&gt;
&lt;h2 id="le serveur"&gt;Le serveur&lt;/h2&gt;
&lt;p&gt;Nous souhaitions impl&amp;eacute;mente une structure de serveur autoritaire et de clients simples (&lt;a href="https://www.gabrielgambetta.com/client-server-game-architecture.html"&gt;Explication&lt;/a&gt;). Tout en ayant une interface simple et d&amp;eacute;ployable sur un serveur externe en headless.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;Eacute;cran de d&amp;eacute;marrage serveur" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/console_serveur.png"/&gt;&lt;/p&gt;
&lt;p&gt;Pour se faire, en utilisant python le choix &amp;eacute;vident &amp;eacute;tait de se tourner vers la biblioth&amp;egrave;que &lt;code&gt;sockets&lt;/code&gt; pour cr&amp;eacute;er un tunnel TCP entre le client et le serveur.&lt;br/&gt;
Cependant son utilisation entra&amp;icirc;ne un probl&amp;egrave;me. Le tunnel ainsi cr&amp;eacute;e ne fonctionne qu'entre le serveur et un seul client. Or nous souhaitons pouvoir jouer en multijoueurs. Deux solutions sont disponibles : 
- Utiliser &lt;code&gt;sockets&lt;/code&gt; avec &lt;code&gt;selectors&lt;/code&gt; pour faire du multiplexage des entr&amp;eacute;es et ainsi avoir plusieurs clients connect&amp;eacute;s en m&amp;ecirc;me temps
- Utiliser la nouvelle biblioth&amp;egrave;que &lt;code&gt;asyncio&lt;/code&gt; apport&amp;eacute;e par python 3&lt;/p&gt;
&lt;p&gt;Nous avons d&amp;eacute;cid&amp;eacute; de partir sur la deuxi&amp;egrave;me solution, cette derni&amp;egrave;re prenant en charge le c&amp;ocirc;t&amp;eacute; asynchrone du serveur par le biais de deux nouveaux mots cl&amp;eacute;s : &lt;em&gt;async&lt;/em&gt; et &lt;em&gt;await&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A partir de la on peut commencer &amp;agrave; cr&amp;eacute;er un serveur prenant en charge la connexion de multiples clients et en leur associant un identifiant unique.&lt;/p&gt;
&lt;h3 id="les entites"&gt;Les entit&amp;eacute;s&lt;/h3&gt;
&lt;p&gt;Le serveur &amp;eacute;tant autoritaire c'est &amp;agrave; lui de g&amp;eacute;rer les entit&amp;eacute;s, par cons&amp;eacute;quent de g&amp;eacute;rer l'intelligence artificielle de ces derni&amp;egrave;res. Encore une fois plusieurs m&amp;eacute;thodes sont disponibles, mais celle qui m'a le plus attir&amp;eacute; est la machine &amp;agrave; &amp;eacute;tats-finis.&lt;br/&gt;
Pour les non initi&amp;eacute;s, la machine &amp;agrave; &amp;eacute;tats finis est un automate qui est dirig&amp;eacute; par l'&amp;eacute;tat dans lequel il se trouve actuellement. Ci-dessous, je vous pr&amp;eacute;sente le diagramme des &amp;eacute;tats r&amp;eacute;gissant l'intelligence artificielle des entit&amp;eacute;s.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Diagramme des &amp;eacute;tats des entit&amp;eacute;s" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/FSM.png"/&gt;&lt;/p&gt;
&lt;h2 id="le client_1"&gt;Le client&lt;/h2&gt;
&lt;p&gt;Pour la cr&amp;eacute;ation du client plusieurs biblioth&amp;egrave;ques graphiques sont &amp;agrave; notre disposition. Je pourrais citer par exemple tkinter, wxPython, pyQt ou m&amp;ecirc;me Kivy. Nous avons d&amp;eacute;cider de d&amp;eacute;velopper notre interface avec &lt;a href="https://fr.wikipedia.org/wiki/PyQt"&gt;PyQt5&lt;/a&gt; en raison de son outil &lt;em&gt;QtDesigner&lt;/em&gt; (un outil graphique pour g&amp;eacute;n&amp;eacute;rer des interfaces) et sa documentation tr&amp;egrave;s fournie. &lt;/p&gt;
&lt;p&gt;Le premier &amp;eacute;cran est celui de connexion au serveur. Les serveurs enregistr&amp;eacute;s sont affich&amp;eacute;s dans une liste et l'utilisateur peut choisir son pseudonyme.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;Eacute;cran de connexion client" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/start_screen.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Une fois connect&amp;eacute;, un identifiant unique lui est attribu&amp;eacute; par le serveur afin de pouvoir se faire authentifier par le serveur ainsi que les autres clients. Cette &amp;eacute;tape r&amp;eacute;alis&amp;eacute;e, l'interface de jeu peut s'ouvrir, pr&amp;eacute;sentant l'aire de jeu, la carte (bas&amp;eacute;e sur la rade de Brest), les entit&amp;eacute;s ainsi que la ChatBox et le Radar.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ecran de jeu" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/demo_multi.gif"/&gt;&lt;/p&gt;
&lt;h3 id="le radar"&gt;Le radar&lt;/h3&gt;
&lt;p&gt;Le radar est l'un des &amp;eacute;l&amp;eacute;ments cl&amp;eacute;s du jeu. Il permet de d&amp;eacute;tecter les ennemis aux alentours et de transmettre la position relative au joueur.&lt;br/&gt;
Le fonctionnement est relativement simple : on parcoure les entit&amp;eacute;s pr&amp;eacute;sente sur le serveur et on ne garde que celles qui sont &amp;agrave; port&amp;eacute;e par un calcul de distance euclidienne. Ensuite on v&amp;eacute;rifie que l'entit&amp;eacute; soit pr&amp;eacute;sente sous le faisceau vert (voir image ci-dessous) pour &amp;ecirc;tre affich&amp;eacute;e &amp;agrave; l'&amp;eacute;cran, gr&amp;acirc;ce &amp;agrave; du calcul vectoriel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="D&amp;eacute;monstration du Radar" class="center img-zoomable" height="300px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/radar.gif"/&gt;&lt;/p&gt;
&lt;h3 id="la documentation"&gt;La documentation&lt;/h3&gt;
&lt;p&gt;Pour ce projet, la r&amp;eacute;daction d'une documentation est n&amp;eacute;cessaire. Pour nous simplifier la t&amp;acirc;che, nous avons d&amp;eacute;cider de tout automatiser en utilisant &lt;a href="https://www.sphinx-doc.org"&gt;Sphinx&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Cet outil nous permet de g&amp;eacute;n&amp;eacute;rer automatiquement la documentation dans le style de Read-the-Docs en prenant la documentation &amp;eacute;crite dans les doc-strings du projet. Nous nous sommes tenu au mod&amp;egrave;le de Google concernant les doc-strings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Documentation sur ReadTheDocs" class="center img-zoomable" height="400px" src="https://nightlyside.github.io/blog/images/projets/bataille-brestoise/docs_rtd.png"/&gt;&lt;/p&gt;
&lt;p&gt;Nous avons finalement upload&amp;eacute; la documentation sur ReadTheDocs, elle est disponible &amp;agrave; l'adresse : &lt;a href="https://la-bataille-brestoise.readthedocs.io/fr/latest/"&gt;https://la-bataille-brestoise.readthedocs.io/fr/latest/&lt;/a&gt;&lt;/p&gt;</content><category term="projets"></category><category term="python"></category><category term="IHM"></category><category term="Qt"></category></entry></feed>