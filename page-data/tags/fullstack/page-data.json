{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/fullstack/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":3,"edges":[{"node":{"excerpt":"Après avoir réalisé pendant le 1er confinement une application basique en python pour trouver des recettes en fonction des ingrédients présent dans son frigo (le projet est expliqué ici : a-chef-in-the-fridge), je souhaite pousser le concept pour avoir une application complète et fonctionnelle.  Cependant la façon dont je l’ai précédemment conçue ne me plait pas. Bootstrap est trop lourd sans retirer le code inutile (voir l’élimination de code inutile sur Wikipedia), et la communication entre la base de donnée et l’application n’est pas très sécurisée, d’autant plus que le backend, codé en PHP n’est vraiment pas satisfaisant sur de nombreux points. Planification Bad programmers worry about the code. Good programmers worry about data structures and their relationship.\n— Linus Torvalds Un peu à la manière de ces mots, je vais d’abord fixer la structure du projet et les liens entre chacune des parties avant de commencer à coder. Pour cela je vais d’abord devoir fixer des objectifs, ou plutôt des exigences. Cahier des charges L’application peut très vite devenir large et je risque fortement de me perdre dans les fonctionnalités. Avec ma compagne nous avons donc défini des exigences minimales pour sortir un produit viable. Pour trouver ces exigences on peut commencer par la phrase ”L’application doit” : permettre à un utilisateur de donner les ingrédients qu’il a et retourner des recettes en conséquence enregistrer et afficher des recettes tirées d’internet ou enregistrées par les utilisateurs être accessible sur un navigateur web (et pourquoi pas une application mobile) à n’importe quel moment Structure Pour répondre à ces exigences il faut penser à la façon dont le projet va s’articuler. Quelles sont les briques nécessaires à la réalisation de ce projet ? Faisons la liste des élements nécessaires. On va pouvoir ensuite les mettre sur un schéma qui donnera leurs relations respectives. Il nous faut : Un moyen d’enregistrer des données (pour les recettes et les ingrédients) -> exigence 1 Un moyen de traiter les données, d’y accéder, de chercher des recettes à partir d’ingrédients et d’enregistrer des recettes -> exigence 2 Une interface utilisateur pour accéder à ces données et les modifier -> exigence 3 Maintenant que ces éléments sont listés, je dessine le schéma :  Choix des technologies Je pars avec une bonne idée de ce que je souhaite d’un point de vue technologies. Pour la base de données j’hésite encore entre une solution sur Firebase avec le free tier…","fields":{"slug":"devlogs/2020-12-26-chef-in-fridge-v2-introduction"},"frontmatter":{"date":"2020-12-26T20:06:00.000Z","title":"Planification d'un projet : A Chef in the Fridge v2"}}},{"node":{"excerpt":"Le projet a été planifié dans l’article précédent. Je vais maintenant me concentrer sur la base de données ainsi que les objets que je vais stocker dans cette base de données. Choix de la technologie Quand il s’agit de choisir une technologie pour les bases de données, on est confronté à un très large choix. Que ce soit pour des structures “classiques” comme MySQL, ou des technologies plus modernes se basant sur du NoSQL comme Firebase avec leur système de collection, il devient difficile de faire un choix. Mon application sera relativement simple d’un point de vu données. Stocker la base de données sur la même machine que le serveur ne me pose pas de problème, ce qui ouvre encore plus mon choix des possibles 😅. Dans l’introduction j’expliquais hésiter entre Firebase et SQLite. Cependant plusieurs arguments me font pencher vers SQLite comme le fait que j’hébergerais en local cette solution (donc gratuit 🤑) et le fait d’avoir un fichier physique pour la base de donnée me permettra de faire des sauvegardes plus facilement.  Je vais implémenter une base de données SQLite en fichier local sur la même machine que le serveur de backend. Types des données S’agissant d’une application pour chercher et afficher des recettes à partir d’ingrédient, cela sera les deux premiers objets à créer. Les ingrédients Dans ma précédente itération de l’application, l’ingrédient était une structure d’objet complexe. On devait y définir son nom et aussi ses caractéristiques (lipide, glucide, etc…) je souhaitais ainsi pouvoir donner des informations nutritionnelles sur les plats ajoutés. Cependant j’ai découvert il y a peu les jeux de données disponibles publiquement sur le site du gouvernement français : https://www.data.gouv.fr/fr/. Ainsi je pense pouvoir récupérer les qualités nutritionnelles des ingrédients présents dans Ciqual, en téléchargeant le jeu de données sur le site data.gouv.fr.  L’utilisateur n’aura plus à rentrer manuellement les informations, elles seront récupérées automatiquement depuis les informations enregistrée dans la table de données. L’ingrédient devra alors contenir les informations suivantes :  : pour identifier l’ingrédient dans la base de données  : le nom de l’ingrédient  : les proteines pour 100g  : les glucides pour 100g  : les lipides pour 100g  : l’énergie en kcal pour 100g Les recettes Voila le coeur de fonctionnement de l’application : les recettes. Dans l’ancienne itération les recettes étaient malheureusement entrées à la main à partir des…","fields":{"slug":"devlogs/2020-12-27-chef-in-fridge-v2-database"},"frontmatter":{"date":"2020-12-27T09:28:00.000Z","title":"Base de données et objets : A Chef in the Fridge v2"}}},{"node":{"excerpt":"CTFa est un projet de développement web full-stack. Il s’agit d’une plateforme de gestion de challenge de type “Capture the Flag” en Jeopardy autonome et complète. 🚀 Le code source est disponible sur mon repository Github : https://github.com/NightlySide/CTFa Introduction Qu’est ce qu’un Capture the Flag ? Je pense que LiveOverflow l’explique très bien dans sa vidéo : TL;DR : un CTF en Jeopardy est une épreuve sur un temps donné où les participants tentent de résoudre des challenges. Ces challenges contiennent tous un “flag”, c’est à dire un code ou un mot de passe caché qu’il faut retrouvé afin de résoudre le challenge et de gagner des points. Les challenges survolent de nombreux domaines de la cyberdéfense tels que la Cryptographie, la Stéganographie, les vulnérabilités serveurs, web, fichiers binaires, etc… Motivation Le projet CTFa s’inscrit dans mes études à l’ENSTA Bretagne en spécialisation Systèmes Numériques et Sécurité. Dans le cadre du cours sur le développement web full-stack nous avions à réaliser un site web suivant un cahier des charges assez vagues. Il devait entre autres posséder les caractéristiques suivantes : Une base de données permettant de stocker le contenu du site Un backend robuste de notre choix Un frontend responsive (adapté à tous les écrans) permettant d’accéder aux données et de les modifier Ma vocation étant la cyberdéfense et ayant participé et remporté la 1ère place aux challenge Break The Code 2019 et Break The Code 2020, je me suis orienté vers la création d’une plateforme permettant d’accueillir ce type d’épreuves. C’est ainsi que n’acquit CTFa : une plateforme de gestion de CTF.  M’étant beaucoup inspiré des fonctionnalités du projet open source CTFd j’ai souhaité faire un clin d’œil en lui donnant un nom similaire. La structure du projet Pour suivre le cahier des charges imposées par le cours, il m’a fallut choisir une structure MVC (Model View Controller) qui permet de séparer les données du rendu des pages web. J’ai essayé de reproduire la structure MVC du projet avec le schéma suivant : Schéma MVC La base de donnée Concernant la base de données plusieurs technologies sont à ma disposition. Si je pars sur les plus populaires on peut parler de MySQL, SQLite ou encore MongoDB. Cependant ce projet était l’occasion pour moi d’essayer une technologie différente.  Réalisant le backend en Java, mon choix s’est orienté sur H2 qui a pour avantage de pouvoir se charger entièrement dans la mémoire RAM du système l’exécutant…","fields":{"slug":"ctfa-web-fullstack"},"frontmatter":{"date":"2020-12-13T14:08:00.000Z","title":"CTFa: Plateforme de gestion de CTF"}}}]}},"pageContext":{"tag":"fullstack"}},"staticQueryHashes":["3433897746","712016698","781468736"]}