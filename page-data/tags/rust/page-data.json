{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/rust/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"DÃ©veloppement son propre moteur de jeu en 3d est un trÃ¨s bon exercice pour comprendre comment fonctionnent les graphismes\n3d sur son ordinateur. Nous allons voir comment crÃ©er notre propre moteur de rendu pour afficher des Voxels et le tout\nen rust ! ğŸš€ Cet article est Ã©crit suite Ã  mes recherches sur le sujet qui ont conduit Ã  la crÃ©ation de mon moteur : ROVER engine\ndisponible en open-source sur github ici: ROVER-engine Les technologies Pour Ãªtre le plus clair possible je vous propose ce schÃ©ma pour expliquer les diffÃ©rentes briques nÃ©cessaires Ã  la\nrÃ©alisation de ce projet.  Langage de programmation CommenÃ§ons par le langage. La plupart des moteurs maison sont codÃ©s en C++ cependant je voulais me tourner vers un\nnouveau langage que je considÃ¨re dâ€™avenir: le Rust.  Pour rÃ©sumer en quelques mots, Rust est un langage de programmation de bas niveau qui place la sÃ©curitÃ© mÃ©moire au coeur\nde sa conception. Ainsi les fuites ou corruption de mÃ©moire sont quasiment impossible, le compilateur tenant le\ndÃ©veloppeur presque par la main. Gestionnaire de fenÃªtres Ce choix est dÃ©pendant du langage de programmation choisi. Pour rust, le choix Ã©vident est winit. Cette bibliothÃ¨que permet de gÃ©rer de faÃ§on cross-platform la crÃ©ation ainsi que la gestion des fenÃªtres Ã  bas niveau. Voici par exemple le code permettant dâ€™ouvrir une fenÃªtre et de la fermer en cliquant sur la croix en haut de cette\nderniÃ¨re: Mais nous y reviendrons plus en dÃ©tails dans les prochains articles ğŸ˜‰ API Graphique Vous avez sÃ»rement dÃ©jÃ  entendu parler de DirectX, nÃ©cessaire pour faire fonctionner la plupart des jeux sous windows.\nEh bien DirectX est une API graphique, câ€™est Ã  dire une couche dâ€™abstraction permettant de gÃ©rer certains concepts\nde trÃ¨s bas niveau avec le GPU. Les trois API Graphiques les plus populaires et rÃ©pandues sont : OpenGL: cross-platform mais une syntaxe qui se fait vieille DirectX: une API uniquement disponible sous windows mais moderne Vulkan: une API moderne cross-platform mais de bien plus bas niveau que les autres Pour ce projet jâ€™ai dÃ©cidÃ© de monter dâ€™un cran niveau abstraction, jâ€™ai donc choisi comme API Graphique wgpu\nou encore appelÃ© WebGPU.  Cette API possÃ¨de plusieurs avantages non nÃ©gligeables. Tout dâ€™abord elle est cross-platform\nmais surtout sa syntaxe est indÃ©pendante des autres API. Nous pouvons alors changer dâ€™API Ã  la volÃ©e ou produire\nplusieurs binaires fonctionnant avec dâ€™autres API. Enfin â€¦ elle est aussi Ã©crite en Rust ğŸ¦€ Le moteur Quâ€™est-ce qui vaâ€¦","fields":{"slug":"devlogs/2021-04-23-introduction-rendu-3d"},"frontmatter":{"date":"2021-04-23T09:11:00.000Z","title":"CrÃ©er son moteur de jeu 3d - Introduction"}}}]}},"pageContext":{"tag":"rust"}},"staticQueryHashes":["3433897746","712016698","781468736"]}