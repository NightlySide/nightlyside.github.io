{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/compilation/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":2,"edges":[{"node":{"excerpt":"Nous allons voir comment construire une machine virtuelle capable d’interpréter des instructions et de modifier les valeurs des registres en conséquence. Cet article a vu le jour suite au cours sur les architectures numériques de l’ENSTA Bretagne et grâce à l’article très complet (en Anglais) ”VM in C” Conception du programme Choix d’un jeu d’instructions Nous allons commencer par le programme puisque c’est ce que l’on souhaite exécuter après tout. Pour le jeu d’instructions j’ai choisi d’implémenter une partie du jeu d’instructions MISC (Minimal Instruction Set Computer) :  Ce choix est motivé par le fait que ce jeu minimaliste reste le plus simple à implémenter (peu d’instructions égal moins de travail pour avoir un MVP) Adresses de registre Tout registre et toute variable en mémoire possède une adresse. Pour la machine virtuelle on va devoir décider d’une façon de gérer cet espace mémoire.  On va commencer par quelque chose de simple et placer les register dans un tableau. Ainsi l’adresse du registre sera son index dans le tableau des registres. Cela est amplement suffisant pour un simulateur, mais devra être repensé pour une architecture embarquée. Structure d’une instruction Comment écrire une instruction ? On verra plus tard que pour traduire du texte vers un code que la machine pourra interpréter on devra passer par un lexer et un parser (ce qui sort du domaine de cet article). Pour l’instant voici à quoi va ressembler une instruction, les données étant en hexadécimal :  L’exemple précédent permet d’additionner les valeurs contenues dans les registres 2 et 5 et d’assigner la valeur au registre 1 : . Cet exemple est équivalent pour toutes les instructions à 3 arguments. Comment écrire une instruction à seulement 2 arguments ? On garde la même structure de données sauf que cette fois-ci on prend les 2 derniers caractères que l’on considère être 1 seul argument :  Ce qui correspond à l’assignation d’un entier à un registre : . Il ne reste plus qu’à coder la machine virtuelle maintenant que l’on connaît la structure des instructions ! La machine virtuelle N’importe quel langage de programmation peut être utilisé pour programmer la machine virtuelle qui nous servira de simulation. On a peut être plus intérêt à prendre un langage compilé pour optimiser les performances de la simulation. J’ai choisi python pour voir la différence avec l’article cité plus haut. Python étant un langage orienté objet, ma machine virtuelle sera donc un objet. On commence alors…","fields":{"slug":"python/2021-01-13-vm-in-python"},"frontmatter":{"date":"2021-01-13T18:32:00.000Z","title":"Machine virtuelle en Python"}}},{"node":{"excerpt":"Nous allons maintenant améliorer la machine virtuelle que l’on a conçut dans l’article précédent et ajoutant des fonctionnalités et en redéfinissant les objectifs attendus. Pour suivre cet article je vous recommande vivement mon premier article ”Machine virtuelle en Python” qui explique comment concevoir une machine virtuelle en python. Cahier des charges Pour pouvoir redéfinir nos objectifs proprement il est important de fixer quelques exigences puis d’y répondre par le code une à une. Le but est à la fin d’avoir une instruction qui tient sur 32 bits (soit 8 bits en hexadécimal) afin de respecter différentes conventions en place dans les architectures processeur (32 bits). Les instructions Commençons par les instructions. Pour rappel ou souhaite implémenter le jeu d’instructions MISC (Minimal Instruction Set Computer) :  Au total nous avons 19 instructions. Si on souhaite attribuer un numéro par instruction il nous faudra donc des numéros allant de 0 à 18. Nos instructions étant codées en héxadécimal, il nous faudra 2 bits en hexadécimal pour représenter les 19 possibilités. (il nous restera alors  instructions disponibles.) Les arguments On a vu dans le jeu d’instruction que les instructions pouvaient prendre 0 (stop) à 3 (add, …) arguments. On remarque dans le jeu d’instructions que les arguments peuvent être des registres ou bien des constantes. Cependant on ne peut avoir qu’une seule constante par opération : On a déjà 2 bits sur les 8 qui sont pris pour le numéro d’instruction. Il nous en reste donc 6. Si on a 3 arguments on aura 2 bits par argument. Or  possibilités donc on pourra avoir au plus 256 registres. Et surtout on pourra additionner le contenu d’un registre avec un constante faisant au plus 255. Si on a 2 arguments (par exemple pour charger une constante dans un registre) on aura alors  possibilités pour le registre mais  possibilités pour la constante ! C’est déjà mieux. Les registres Continuons avec les registres. On peut se poser la question suivante : quelle est la taille maximale d’un objet ? Elle est directement conditionnée par les arguments et le nombre de bits disponibles dans l’instruction. On a vu précédemment qu’on ne pouvait utiliser que 256 registres. Et que la taille maximale d’une constante était de 65535 pour un entier non signé. Donc chaque registre devra être de taille  bits ou encore  bits en hexadécimal. Structure d’une instruction En se référant à toutes les exigences que l’on a détaillé précédemment, on arrive à la…","fields":{"slug":"python/2021-01-14-better-vm-python"},"frontmatter":{"date":"2021-01-14T13:08:00.000Z","title":"Amélioration de la machine virtuelle"}}}]}},"pageContext":{"tag":"compilation"}},"staticQueryHashes":["3433897746","712016698","781468736"]}