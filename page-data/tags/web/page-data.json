{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/web/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":8,"edges":[{"node":{"excerpt":"Les chatbots commerciaux sont de plus en plus présents sur les sites de grande distribution ou de services à grande échelle. Je me suis demandé à quel point il était facile de concevoir un chatbox vocal en utilisant python et Dialogflow. Le code du projet est disponible sur github : https://github.com/NightlySide/ChatBox-Vocal Comme tout projet, il faut pouvoir trouver un point d’entrée afin de ne pas se perdre. Je décide donc de commencer par traduire du français oral en texte. Le speech to text Python étant très versatile et surtout très populaire, il existe une multitude de bibliothèques pour faire de la traduction de vocal vers texte. N’en connaissant aucun, j’ai cherché à savoir parmi toutes ces bibliothèques, lesquelles fonctionnaient pour une traduction en français. Je me suis arrêté sur Speech-Recognition qui me semble bien fourni en documentation, qui fonctionne avec diverses API de reconnaissance de texte, mais surtout qui comprend bien le français ! Un premier script permet d’essayer cette fonctionnalité en écoutant puis en traduisant ce qui a été dit : Il ne reste plus qu’à tout mettre dans une fonction, ou plutôt dans une classe en ajoutant les fonctions d’écoute en arrière plan avec une fonction “callback”. Le code final pour cette classe est le suivant : Maintenant le programme est capable d’écouter en arrière plan, de détecter une phrase et de la convertir en texte, ici grâce à l’API de google. Le text to speech Afin de pouvoir parler de chatbot vocal, il est intéressant de faire “parler” la machine. De même je vais chercher une bibliothèque capable de parler en français pour des raisons évidentes.\nPour commencer j’ai décidé d’utiliser Google Text-to-speech par sa simplicité et sa popularité. Plus tard il serait intéressant d’enregistrer moi même les phrases surtout si le chatbot vocal possède une quantité réduite de mots.\nPour jouer le son je voulais au départ utiliser PyAudio, j’ai choisi sur une bibliothèque bien plus simple à utiliser : playsound qui est en plus cross platform ! Le code simple pour faire une phrase est le suivant : Il est bien mieux d’utiliser  pour supprimer un fichier que  Il ne reste plus qu’à créer la fonction correspondante, pas besoin de créer une classe ici. Finalement la fonction devient la suivante : J’en ai profité pour ajouter un nom de fichier aléatoire pour éviter le cas ou la fonction est appelée plusieurs fois en même temps, à l’aide d’un UUID. La conversation Pour créer un chatbot un minimum intelligent…","fields":{"slug":"2020-06-26-chatbot-vocal"},"frontmatter":{"date":"2020-06-26T12:00:00.000Z","title":"Un chatbot vocal en python"}}},{"node":{"excerpt":"Si le titre vous rend confus c’est peut être normal. Je vais essayer d’expliquer ce qu’est le scraping et le parsing que j’ai utilisé dans le cadre de mon projet: A Chef in the Fridge v2. Motivation Dans ma précédente itération, les recettes étaient entrées à la main à partir des ingrédients déjà présent dans la base de données. Non seulement cette solution n’était clairement pas intuitive et lente, mais elle est trop peu flexible 🤢. Pour cette itération je souhaite pouvoir importer automatiquement une recette depuis n’importe quel site le permettant (comme Marmiton ou 750g). Pour cela j’ai besoin de deux outils : Un scraper pour récupérer les données de la page web de la recette Un parser pour convertir les ingrédients en objets que le serveur pourra comprendre Le scraper de recettes On va commencer par les bases avant d’attaquer le sujet. Qu’est-ce qu’un scraper ? “Le web scraping (parfois appelé harvesting) est une technique d’extraction du contenu de sites Web, via un script ou un programme, dans le but de le transformer pour permettre son utilisation dans un autre contexte.”\n— Wikipedia Autrement dit, un scraper permet de récupérer les informations d’un site comme les objets présents sur la page ou les métadonnées. Cela se fait très simplement sur Python avec les bibliothèques  (intégrée) et . Prenons l’exemple de cette recette sur marmiton concernant un cake au poires et au chocolat: https://www.marmiton.org/recettes/recette_cake-aux-poires-et-chocolat-fondant_38922.aspx. On peut récupérer le contenu de la page à l’aide des lignes suivantes : Une histoire de méta(données) Une autre chose intéressante est que les sites de recettes, pour optimiser leur classement sur les moteurs de recherche (voir Search Engine Optimization), utilisent de nombreuses méta-données et il y en a une conçue spécialement pour les recettes. Le site schema.org décrit la structure des méta-données qui concernent les recettes ici. Pour commencer ces métadonnées sont présentes dans une balise  contenant un objet JSON décrivant la recette. Essayons pour voir sur notre lien précédent : Si on essaye d’afficher le contenu de la variable  on obtient ceci : On peut maintenant récupérer les ingrédients, le temps de préparation, le nombre de personnes, les notes et les étapes de préparation de la recette et tout cela en ne cherchant que dans l’en-tête de la page ! What a time to be alive Mais nouveau problème 😢 comment faire pour que le serveur comprenne “150 g de farine” ou “1…","fields":{"slug":"devlogs/2020-12-27-recette-ingredient-parser"},"frontmatter":{"date":"2020-12-27T20:10:00.000Z","title":"Scraper de recettes et parser d'ingrédients"}}},{"node":{"excerpt":"When it comes to the design of an application protocol interface (API), some keywords crop up on the internet like REST or CRUD. However security comes last in the design process. In this post you will learn how to make your API secure, using state of the art technology in your python project. To follow this post you should know what an API is and have some experience coding with python. Make sure python 3.x in installed on your computer in order to make the following snippets work. What are web tokens? Take a second to think about your API. Perhaps you are fetching data from a specific endpoint which needs to be secured. How can you be sure the request is legitimate or the user making the request has the required rights to do so? A good practice is to use authorization tokens. To be more specific we will use Javascript Web Tokens (JWT). Javascript Web Token « JSON Web Token (JWT, pronounced /dʒɒt/, same as the word “jot”) is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. » - Wikipedia In a nutshell, a JWT is a token holding information that can be verified in order to authenticate a user and their rights. This token will be sent in the header of the request or as a query argument to give context to the API. A JWT token can be broken down into three pieces, separated by a point (”.”) : an header describing the token type and the hashing algorithm used a payload with the token’s content, for example the username, the user’s role, expiration of the token, … a signature which will take the header and the payload, encoded using base64, concatenated with a secret which yields a hash to verify the authenticity of the token The signature is optional for JWT tokens to work. However, is no signature is provided, anyone can compromise and change the content carried by the token. Example For the following example, the payload will be the username, the role, the creation date and the secret will be mysupersecret. I am using jwt.io in order to deconstruct the token.  The website returns the following token : Verifying a JWT token As I wrote above, a JWT token can be verified to be sure the payload has not been modified by an attacker. To verify the token, the server has to know the secret, so that the signature can be recreated on the server side and compared to the signature provided to see if the token is legitimate. Knowing the common secret, the server…","fields":{"slug":"english/2022-02-28-securing-api-with-oauth"},"frontmatter":{"date":"2022-02-28T09:00:00.000Z","title":"Securing an API using JWT and Python"}}},{"node":{"excerpt":"Github est devenu très rapidement la référence en logiciel de gestion de développement. Aujourd’hui les projets open-source sont très nombreux sur la plateforme et de plus en plus d’entreprises demande aux candidats de leur fournir en plus de leur CV, leur compte Github afin de voir les projets du candidat ainsi que ses contributions au monde open-source. Créer un compte sur github Tout d’abord, il faut savoir que Github est gratuit. La fonctionnalité “Pro” ajoute certes quelques éléments intéressants mais qui ne sont pas utiles au jeune développeur. Si vous êtes étudiant vous pouvez obtenir un compte pro en passant par le pack éducation Pour créer un compte il suffit d’aller sur le site https://github.com/ et de renseigner les champs suivants.  Valider le compte Comme la plateforme est sérieuse et que le contenu publié est important pour les développeurs, il est nécessaire d’activer son compte avant de pouvoir continuer.\nIl s’agit donc de résoudre un petit puzzle pour valider le compte (surtout que vous n’êtes pas un robot). \nEnfin, cliquez sur join a free plan. N’oubliez pas de regarder vos mails pour activer votre compte. Quelques infos sur votre profil Pour pouvoir remplir un profil de base, l’étape suivante est de donner quelques détails sur votre formation de programmeur.\nEntre autres : le type de travail, l’expérience en programmation et l’utilisation prévue de Github. Personnellement étant un étudiant avec de l’expérience en programmation je coche : Student : I go to school A lot : I’m very experienced Host a project (repository), Create a website with GitHub Pages, School work and student projects Enfin dans mes intérêts j’indique comme langage (pour ma part) python, html, php, javascript. Cliquez sur Complete Setup. Les prochaines étapes Maintenant que vous avez un compte Github, voici quelques étapes que vous pouvez faire : Créer un repository et commencer un projet Collaborer sur un projet en commun Changer votre nom et votre avatar Héberger un site web avec GitHub Pages","fields":{"slug":"eportfolio/2020-06-29-creer-compte-github"},"frontmatter":{"date":"2020-06-29T12:00:00.000Z","title":"Comment créer un compte GitHub"}}},{"node":{"excerpt":"Avoir un site web à son nom est non seulement un gros plus dans le monde du numérique, mais il peut même être nécessaire pour décrocher certains emplois.\nGrâce à GitHub Pages il est facile de créer un site statique et de l’héberger sur leurs serveurs, c’est ce que nous allons voir dans cet article. Cet article suppose que vous avez déjà un compte GitHub.\nSi ce n’est pas le cas vous pouvez lire mon article sur comment créer un compte github Créer le repository La première étape consiste à créer le repository, le projet, qui contiendra les fichiers sur site.\nPour cela il suffit de cliquer sur le “plus” en haut à droite et de choisir New repository.  Attention le choix du nom est important ! Pour pouvoir profiter de github pages, le repository doit avoir un nom de la forme :  Exemple : mon pseudo pour ces articles sur Github est skycrawler67, le repository doit alors se nommer . Il faudra bien penser à mettre le repository en publique et pour nous simplifier la vie on va l’initialiser avec un README.\nEnfin, cliquez sur le bouton Create Repository pour créer le repository.  Activer l’hébergement par Github Pages Une fois les étapes précédentes réalisées vous devriez arriver sur la page principale de votre repository, vous montrant le contenu du fichier README ainsi que les fichiers présents dans ce projet. Pour activer l’hébergement sur Github Pages il faut aller dans les paramètres (cliquez sur l’engrenage) puis descendez jusqu’à la section “Github Pages”. Si toutes les étapes précédentes ont été suivies, le site nous explique que le site est bien publié à l’adresse correspondant au nom du repository. Si ce n’est pas le cas il vous faudra spécifier la branche que Github devra suivre pour la publication. La branch master (ou plus récemment main) est la plus communément utilisée, il s’agit de la branche principale.  Exemple : en suivant ce que j’ai écrit, mon site est alors publié sur https://skycrawler67.github.io/. Conclusion Pour vérifier que le site est bien en ligne il suffit de suivre le lien. Si tout s’est bien passé le lien affiche le contenu du fichier README.md. Il ne reste alors plus qu’à créer le site et l’envoyer sur ce repository pour qu’il soit publié sur la page. Pour aller plus loin : Créer un site web statique avec Jekyll/Hugo/Pelican (recommandé) Créer une landing page (page d’accueil) en HTML/CSS/JS avec par exemple Bootstrap Rédiger des articles, des postes, mettre son CV en ligne etc… Ce site à été uploadé sur GitHub Pages, je vous…","fields":{"slug":"eportfolio/2020-07-01-creer-un-site-github-pages"},"frontmatter":{"date":"2020-07-01T12:00:00.000Z","title":"Comment héberger un site web (simple) avec GitHub Pages"}}},{"node":{"excerpt":"Je l’ai déjà écrit mais avoir un site web pour se mettre en avant est nécessaire aujourd’hui. Les générateurs de contenu statique représentant le futur du web, nous allons voir comment concevoir un site web statique avec Pelican, un module pour python et l’intégrer dans GitHub Pages. Introduction Pour créer un site web il existe pleins de moyens différents. Pour les novices, des services graphiques sont proposés pour concevoir des sites web en 1 pages, pour les plus curieux il existe des CMS (Content Management System) qui permettent de de rédiger des articles et de gérer le contenu. Cependant cette dernière solution est souvent lourde (ex: Wordpress) et peut potentiellement présenter des failles. Un nouveau système est cependant en train de monter en puissance : les générateurs de contenus statiques. Pelican est l’un d’entre eux. On pourrait aussi citer par exemple Hugo (en Go) et Jekyll (en Ruby). Pour cet article je vais me concentrer sur Pelican. Qu’est-ce que Pelican ? « Pelican est un générateur de site statique, écrit en Python » Pour ceux qui ne savent pas ce qu’est un générateur de site statique voici le fonctionnement simplifié de la rédaction d’un article : Le contenu de l’article est rédigé en Markdown Pelican récupère ces fichiers et les transforme en page web en se basant sur des templates Le site web complet est disponible dans le dossier output Une fois les templates conçut, il est alors très simple de rajouter un article ou une page sur le site ! C’est la toute la puissance de ces générateurs : le contenu est compilé et statique donc l’accès au site est très rapide et il n’y a pas de failles car le code source du site (les fichiers markdown et la configuration) ne sont pas directement accessibles. Aussi est-ce que je vous ai parlé des plugins ? Pelican peut être amélioré en fonctions grâce aux plugins disponibles ici (vous même pouvez créer un plugin assez facilement) Création du projet Tout d’abord il faut installer Pelican. Je suppose que vous avez déjà python 3 installé sur votre machine avec pip. Pour installer Pelican il suffit de lancer la commande (avec support pour les fichiers Markdown): Ensuite créer un dossier qui contiendra votre site web et entrez dedans.\nOn va maintenant créer le squelette du site à l’aide de la commande .  Renseignez tous les champs demandé. Pour information ce qui est renseigné entre les crochets est la valeur par défaut si vous n’entrez rien.\nAttention : n’oubliez pas de dire oui à la question sur Github…","fields":{"slug":"eportfolio/2020-07-02-creer-un-site-statique-avec-pelican"},"frontmatter":{"date":"2020-07-02T12:00:00.000Z","title":"Comment créer un site web statique avec Pelican"}}},{"node":{"excerpt":"Souhaitant manger de façon plus équilibrée et ne sachant pas toujours quelle recette faire avec les ingrédients présents dans mon frigo, j’ai décidé de concevoir une application qui résout ce problème. L’application est disponible publiquement ici : https://a-chef-in-the-fridge.herokuapp.com/\nLe code source est disponible sur mon repository github : https://github.com/NightlySide/AChefInTheFridge Le cahier des charges Je souhaite que cette application réponde à plusieurs besoins. Voici la liste succincte : Proposer une recette en fonction des ingrédients présents dans mon frigo Pouvoir préparer les menus pour une semaine Afficher un semainier avec la liste des recettes disponibles Imprimer (en PDF) la liste de courses à faire Afficher les informations complémentaires sur la qualité des recettes Un grand livre de recettes numérique Toute l’application se base sur des ingrédients et des recettes enregistrées par les utilisateurs. Pour les stocker, je suis tout d’abord passé par un stockage fichier en utilisant le format JSON. Cependant, après avoir déployé l’application sur la plateforme Heroku, qui recharge les fichiers à l’original dès lors que la plateforme n’est plus utilisée, les recettes sont perdues. La solution ? Une base de données MySQL sur un autre serveur. Ainsi, j’ai une base de données contenant une table des recettes et une table des ingrédients. L’avantage de cette structure est que les données sont accessibles depuis n’importe quelle plateforme pouvant faire des requêtes SQL, et de pouvoir plus tard implémenter la gestion des utilisateurs et des éditeurs sur la plateforme. Affichage des recettes Pour pouvoir remplir le premier point de mon cahier des charges, j’ai besoin de créer une interface permettant d’ajouter les ingrédients présents dans son frigo.  L’auto-complétion est réalisée en effectuant une requête AJAX au changement du contenu de la zone d’ajout de l’ingrédient. Calcul du score Le plus important avec cette application est de pouvoir trouver la recette dans laquelle il manque le moins possible d’ingrédients. Pour se faire, j’ai crée un score pour chaque recette qui dépends directement des ingrédients ajoutés par l’utilisateur.  Afin que le score soit cohérent, la recette indique la quantité nécessaire pour chaque ingrédients. par exemple pour un plat de pâtes, avoir dans son frigo les 200g nécessaire de pâtes donnera un plus grand score que juste la pincée de sel pour assaisonner le plat. J’ai donc mis en place un système de…","fields":{"slug":"a-chef-in-the-fridge"},"frontmatter":{"date":"2020-06-21T12:00:00.000Z","title":"A Chef in the fridge"}}},{"node":{"excerpt":"CTFa est un projet de développement web full-stack. Il s’agit d’une plateforme de gestion de challenge de type “Capture the Flag” en Jeopardy autonome et complète. 🚀 Le code source est disponible sur mon repository Github : https://github.com/NightlySide/CTFa Introduction Qu’est ce qu’un Capture the Flag ? Je pense que LiveOverflow l’explique très bien dans sa vidéo : TL;DR : un CTF en Jeopardy est une épreuve sur un temps donné où les participants tentent de résoudre des challenges. Ces challenges contiennent tous un “flag”, c’est à dire un code ou un mot de passe caché qu’il faut retrouvé afin de résoudre le challenge et de gagner des points. Les challenges survolent de nombreux domaines de la cyberdéfense tels que la Cryptographie, la Stéganographie, les vulnérabilités serveurs, web, fichiers binaires, etc… Motivation Le projet CTFa s’inscrit dans mes études à l’ENSTA Bretagne en spécialisation Systèmes Numériques et Sécurité. Dans le cadre du cours sur le développement web full-stack nous avions à réaliser un site web suivant un cahier des charges assez vagues. Il devait entre autres posséder les caractéristiques suivantes : Une base de données permettant de stocker le contenu du site Un backend robuste de notre choix Un frontend responsive (adapté à tous les écrans) permettant d’accéder aux données et de les modifier Ma vocation étant la cyberdéfense et ayant participé et remporté la 1ère place aux challenge Break The Code 2019 et Break The Code 2020, je me suis orienté vers la création d’une plateforme permettant d’accueillir ce type d’épreuves. C’est ainsi que n’acquit CTFa : une plateforme de gestion de CTF.  M’étant beaucoup inspiré des fonctionnalités du projet open source CTFd j’ai souhaité faire un clin d’œil en lui donnant un nom similaire. La structure du projet Pour suivre le cahier des charges imposées par le cours, il m’a fallut choisir une structure MVC (Model View Controller) qui permet de séparer les données du rendu des pages web. J’ai essayé de reproduire la structure MVC du projet avec le schéma suivant : Schéma MVC La base de donnée Concernant la base de données plusieurs technologies sont à ma disposition. Si je pars sur les plus populaires on peut parler de MySQL, SQLite ou encore MongoDB. Cependant ce projet était l’occasion pour moi d’essayer une technologie différente.  Réalisant le backend en Java, mon choix s’est orienté sur H2 qui a pour avantage de pouvoir se charger entièrement dans la mémoire RAM du système l’exécutant…","fields":{"slug":"ctfa-web-fullstack"},"frontmatter":{"date":"2020-12-13T14:08:00.000Z","title":"CTFa: Plateforme de gestion de CTF"}}}]}},"pageContext":{"tag":"web"}},"staticQueryHashes":["3433897746","712016698","781468736"]}