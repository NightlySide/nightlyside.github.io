{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/jwt/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":1,"edges":[{"node":{"excerpt":"When it comes to the design of an application protocol interface (API), some keywords crop up on the internet like REST or CRUD. However security comes last in the design process. In this post you will learn how to make your API secure, using state of the art technology in your python project. To follow this post you should know what an API is and have some experience coding with python. Make sure python 3.x in installed on your computer in order to make the following snippets work. What are web tokens? Take a second to think about your API. Perhaps you are fetching data from a specific endpoint which needs to be secured. How can you be sure the request is legitimate or the user making the request has the required rights to do so? A good practice is to use authorization tokens. To be more specific we will use Javascript Web Tokens (JWT). Javascript Web Token « JSON Web Token (JWT, pronounced /dʒɒt/, same as the word “jot”) is a proposed Internet standard for creating data with optional signature and/or optional encryption whose payload holds JSON that asserts some number of claims. » - Wikipedia In a nutshell, a JWT is a token holding information that can be verified in order to authenticate a user and their rights. This token will be sent in the header of the request or as a query argument to give context to the API. A JWT token can be broken down into three pieces, separated by a point (”.”) : an header describing the token type and the hashing algorithm used a payload with the token’s content, for example the username, the user’s role, expiration of the token, … a signature which will take the header and the payload, encoded using base64, concatenated with a secret which yields a hash to verify the authenticity of the token The signature is optional for JWT tokens to work. However, is no signature is provided, anyone can compromise and change the content carried by the token. Example For the following example, the payload will be the username, the role, the creation date and the secret will be mysupersecret. I am using jwt.io in order to deconstruct the token.  The website returns the following token : Verifying a JWT token As I wrote above, a JWT token can be verified to be sure the payload has not been modified by an attacker. To verify the token, the server has to know the secret, so that the signature can be recreated on the server side and compared to the signature provided to see if the token is legitimate. Knowing the common secret, the server…","fields":{"slug":"english/2022-02-28-securing-api-with-oauth"},"frontmatter":{"date":"2022-02-28T09:00:00.000Z","title":"Securing an API using JWT and Python"}}}]}},"pageContext":{"tag":"jwt"}},"staticQueryHashes":["3433897746","712016698","781468736"]}