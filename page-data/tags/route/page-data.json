{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/route/","result":{"data":{"site":{"siteMetadata":{"title":"Alexandre Froehlich"}},"allMarkdownRemark":{"totalCount":5,"edges":[{"node":{"excerpt":"Le trafic routier est probablement l’un des plus grands fléaux du quotidien. Nous faisant perdre un temps considérable, réduisant la productivité et poussant à des comportements dangereux, les embouteillages représentent un facteur déterminant dans les accidents de la route. Alors qu’ils se produisent presque quotidiennement chaque jour sur certaines routes, et ce depuis des décennies, il serait enfin temps d’envisager une solution pour s’en débarrasser. Avant-propos Ce que je vais m’efforcer de décrire au cours des prochains posts est la démarche que mon binôme (Kieran D.) et moi-même avons entrepris afin de reproduire les conditions d’un bouchon routier, puis d’étudier l’impact de la création d’une déviation sur un tel embouteillage. Cette démarche n’est probablement pas la plus réaliste des simulations et le résultat obtenu pourrait éventuellement différer de ce que nous avons mesuré. Le but étant de se rapprocher un maximum d’un cas concret afin d’avoir une idée générale des solutions à notre disposition pour régler le problème du trafic routier. Comment se crée un embouteillage ? On vient à peine de commencer à réfléchir au sujet qu’on fait déjà face à une première barrière. Comment se crée un bouchon routier ? La question a déjà été pensée, réfléchie, retournée. L’APRR (Autoroutes Paris-Rhin-Rhône) aborde la question dans cet article et définie l’embouteillage : La route est comme un « tuyau » qui ne peut faire passer plus d’un « flux » maximal de véhicules. À cette limite physique s’ajoute le temps de réaction des conducteurs, qui répercutent avec un léger décalage le coup de frein du conducteur qui les précède. Et redémarrent ensuite avec un nouveau temps de retard. Lorsque la circulation est dense, cela suffit à engendrer un bouchon : les temps de retard s’ajoutent les uns aux autres, aboutissant parfois à une perturbation de grande ampleur. Expliquée autrement, il suffit qu’un conducteur adopte un mode de conduite qui sortirait de la “conduite de croisière”, en changeant de voie rapidement par exemple ou encore en ralentissant dans une ligne droite tandis qu’aucun obstacle ne lui fait face.  Comment traduire ces éléments On peut alors commencer à faire une liste des éléments à prendre en compte dans notre étude : les voitures ont une vitesse maximale imposée la voiture peut ralentir à tout moment quel que soit la route (facteur aléatoire) si la voiture rencontre un croisement elle peut emprunter l’un ou l’autre chemin Ainsi que quelques…","fields":{"slug":"tipe/2017-11-29-un-probleme-de-route-demarche"},"frontmatter":{"date":"2017-11-29T12:00:00.000Z","title":"[TIPE] Un problème de route - La démarche (1/4)"}}},{"node":{"excerpt":"Nous allons maintenant modéliser le trafic routier pour une portion de route, en respectant les hypothèses données et décrites dans le dernier post. Pour cela on procède en 3 étapes : on crée un modèle basique à une dimension, puis on l’étend à 2 dimensions et on ajoute en dernière étape les déviations et intersections. Ce post correspond à la première phase. La question qui m’a le plus souvent été posée lorsque je décrivais mon projet à mes camarades de classe était la suivante : Mais comment est-ce que tu choisis l’endroit où va se produire l’embouteillage ? A cette question je leur réponds simplement que je ne choisis pas ! En effet, le but de cette modélisation est de faire en sorte que les voitures, par leur comportement, créent une congestion. Le comportement de base des voitures En suivant l’idée du sujet de concours CCP 2017 (concours d’entrée aux écoles d’ingénieur), on peut décrire le comportement des voitures simplement en décomposant un instant t en plusieurs étapes, en mettant à jour leur vitesse. Cette méthode de simulation s’appelle aussi la simulation de Nagel et Schreckenberg. Accélération La première étape consiste à accélérer le véhicule d’une case par unité de temps. Cela correspond à une phase normale d’accélération. On limite cependant la vitesse à la vitesse maximale de la route. Décélération La seconde étape consiste à faire ralentir le véhicule si la vitesse actuelle le fait rentrer en collision avec un autre véhicule. Pour se faire, on calcule la distance entre le véhicule et le précédent et on le compare à la vitesse actuelle. Si le véhicule est trop loin, le véhicule roule à la même vitesse, mais s’il est trop proche, le véhicule avance jusqu’à coller le véhicule devant lui, sa vitesse en sera diminuée pour simuler un freinage. Facteur aléatoire Cette étape correspond au ralentissement aléatoire qui peut survenir en tout temps. Pour expliquer le réalisme d’une telle opération, il faut s’imaginer rouler sur une autoroute droite sans personne dessus à part un véhicule qui roule (sans régulateur de vitesse bien sûr). Alors il peut survenir un moment d’inattention qui va faire ralentir aléatoirement le conducteur. C’est ce phénomène qui est représenté par cette étape, il se trouve d’ailleurs que pour cette simulation, cette étape est celle qui crée les embouteillages routiers. Déplacement Cette dernière étape permet d’inscrire le mouvement lié à la vitesse de chaque véhicule. C’est à dire qu’après avoir fait la mise à jour de toutes…","fields":{"slug":"tipe/2017-12-01-un-probleme-de-route-modele-info"},"frontmatter":{"date":"2017-12-01T12:00:00.000Z","title":"[TIPE] Un problème de route - Le modèle informatique (2/4)"}}},{"node":{"excerpt":"La deuxième étape consiste à passer la simulation à deux dimensions en vue d’implémenter les déviations et intersections. On peut encore séparer cette étape en plusieurs sous-étapes : création d’une grille qui va accueillir la route, à la manière d’un plateau contenant des cartes ou des jetons, puis création de la route et finalement adaptation des véhicules au nouveau système de route en 2 dimensions. Création de la grille A quoi devra ressembler la grille ? Pour répondre à cette question on pose les conditions de déroulement de la simulation : la grille devra contenir W cases en largeur et H cases en hauteur la simulation comportera T itérations Alors la grille sera représentée par un tableau à 3 dimensions de taille  alors  retournera l’état de la grille à l’instant . Avec le système actuel d’exportation de tableau qui consiste à attribuer une couleur par case (0 pour blanc, 1 pour vert et 2 pour orange pale) avec chaque couleur associée à un élément de la simulation (respectivement vide, route et véhicule). Le code ci-dessus retournera une grille de la bonne taille. Le remplissage étant aléatoire pour mettre en évidence la structure de la grille, un exemple est le suivant :  Création de la route On entame dès à présent une des parties des plus compliquées avec la création de la route. On définit la route comme étant l’ensemble des positions prises par un chemin pour aller d’un point A à un point B.  En prenant les coordonnées de  et  alors le chemin correspondant sera : Algorithme Pour créer la route on initialise un tableau contenant les positions de chaque case. On commence par la case du début puis on choisis la prochaine de façon relativement simple, on sera probablement amené qu’à créer des droites ou des angles droits, il n’est donc pas nécessaire de se compliquer la tâche. Une fois qu’on est arrivée à la dernière case on retourne la liste crée. A partir de cet algorithme on peut maintenant créer une nouvelle fonction qui prendra une liste de positions par lesquelles le chemin devra passer et qui retournera un tel chemin. Comme on suppose le tracé global simple, on segmente le chemin en traçant la route entre 2 positions à chaque fois. A noter qu’écrire  permet de donner autant d’argument à la fonction qu’on le souhaite Par exemple écrire le code ci-dessous : Correspondra à la grille suivante :  Faire avancer les voitures Maintenant qu’on a la grille ainsi que la route qui la parcourt, il est temps de faire avancer les voiture. Pour cela on…","fields":{"slug":"tipe/2017-12-02-un-probleme-de-route-passage-2D"},"frontmatter":{"date":"2017-12-02T12:00:00.000Z","title":"[TIPE] Un problème de route - Passage en 2D (3/4)"}}},{"node":{"excerpt":"Dernière ligne droite pour le modèle informatique. La dernière étape consiste à implémenter les carrefours, les déviations et les intersections. On se place toujours dans les hypothèses mises en place dans l’explication de la démarche. Mais leur implémentation n’est pas facile à se représenter. Durant la phase de développement, on a fait face à de nombreux problèmes, voici comment on les a résolu. Réécriture des représentations des voitures, chemins et de la grille L’ancienne représentation (à l’aide de tableau) n’est probablement pas la meilleure solution à considérer pour la compréhension et la lisibilité de l’algorithme. Pour cela on utilisera les classes (notion hors programme de PSI en CPGE), pour plus d’information ce cours publié sur OpenClassroom explique mieux ce concept que je ne pourrais le faire. Les voitures Une des raisons pour lesquelles nous allons utiliser les classes est que cela facilite la compréhension. En effet pour récupérer la vitesse d’une voiture avant il fallait récupérer une entrée d’un tableau correspondant à ladite voiture. En utilisant les classes on utilise maintenant la méthode . Ainsi, on crée chaque voiture en lui donnant le nombre d’itérations que la simulation va calculer afin de stocker toutes les positions et vitesses pour les analyser. On lui donne le chemin sur lequel elle va évoluer ainsi que sa position initiale et la vitesse maximale à laquelle et pourra circuler. Le reste sera géré par la simulation. La carte et ses routes De même on retranscrit le code précédent en quelque chose de plus exploitable. En effet, il est plus simple d’écrire  pour modifier la carte en ajoutant une voiture à l’instant t. De même pour les routes : Le problème de l’ancienne simulation L’ancienne simulation fonctionnait bien lorsqu’il n’y avait qu’une seule voiture sur la route. Cependant, la voiture, face à une bifurcation va choisir aléatoirement une route ou l’autre. Nous l’avions codé de cette manière, mais nous voulons que la circulation ne se fasse que dans un sens pour pouvoir analyser la vitesse et la densité des voitures. Problème Pour résoudre ce problème, une solution (celle que j’ai choisi), est de numéroter chaque case de la route, ainsi le sens de circulation sera donné par des indices de case croissants. C’est à dire que le chemin du post précédent devient maintenant : Utilisation du nouveau code Quelques procédures et fonctions bien utiles Depuis le début de ces posts, je vous ai présenté des images, du texte…","fields":{"slug":"tipe/2017-12-09-un-probleme-de-route-final"},"frontmatter":{"date":"2017-12-09T12:00:00.000Z","title":"[TIPE] Un problème de route - Le final (4/4)"}}},{"node":{"excerpt":"Un petit bonus pour ce projet. Je cherche maintenant à représenter la vitesse de chaque véhicule afin d’avoir une idée plus précise sur la fluidité du trafic routier. Il y a certes peu de modifications à faire, mais cela en vaut le coup. Pourquoi une telle représentation L’idée m’est venue en lisant des articles sur la représentation de Nagel-Schreckenberg. Après avoir flâné quelques temps sur Wikipédia, j’ai décidé de changer la langue de la page afin de voir si d’autres contributeurs non francophones avaient étoffés leur page plus que ça n’est le cas sur celle française. A ma grande surprise, la page allemande du model de Nagel Schreckenberg montre une représentation du modèle plutôt ingénieuse : donner une couleur par véhicule en fonction de la vitesse de circulation de celui-ci. (voir figure ci-dessous)  Maintenant on va modifier le code source de notre étude afin d’y implémenter cette nouvelle fonctionnalité. Implémentation La première étape est de modifier la fonction qui place les véhicules. En effet, précédemment, pour placer une voiture sur la carte, la simulation ajoutait un *2 sur la case correspondante. Maintenant nous allons remplacer la fonction placerVoiture de la classe Carte par le bout de code suivant : La seule grande différence est que l’on calcule la valeur de la case par . Cela nous amène à notre seconde modification, en effet, pour détecter la présence d’une voiture, on récupérait la valeur d’une case de la carte que l’on comparait à 2. On remplace alors toutes les occurrences par  ce qui permettra de détecter la présence d’une voiture quelque soit sa vitesse. Affichage On a maintenant l’ajout des vitesses des voitures sur la carte, il est grand temps de les afficher ! Pour cela on change légèrement la liste des couleurs de matplotlib.pyplot par : Ainsi une voiture à l’arrêt sera de couleur jaune et tendra vers le rouge en accélérant, puis sera noire à vitesse maximale. Le seul problème avec matplotlib est que si il n’y a pas au moins une occurrence de chaque couleur, il n’affichera pas correctement la couleur de la route et des véhicules. On ajoute alors à la représentation de la carte une unique ligne de pixels contenant toutes les valeurs de la vitesse afin quelles soient toutes représentées : C’est tout ce qu’il y avait à faire !! (oui j’ai passé près de 2 heures sur ces modifications) Le résultat est vraiment satisfaisant par contre.","fields":{"slug":"tipe/2018-03-21-un-probleme-de-route-bonus"},"frontmatter":{"date":"2018-03-21T12:00:00.000Z","title":"[TIPE] Un problème de route - Bonus"}}}]}},"pageContext":{"tag":"route"}},"staticQueryHashes":["3433897746","712016698","781468736"]}